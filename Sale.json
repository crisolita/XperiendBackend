{
    "address": "0x62F15Ee417c9e8EE94DC86A1Dc41B0a3bDaC9B14",
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "currentPhase",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "_tokenAmount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "_address",
            "type": "address"
          }
        ],
        "name": "AddUsersToVesting",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "buyer",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "Claims",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "dispatcher",
            "type": "address"
          }
        ],
        "name": "DispatcherChange",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bool",
            "name": "isPublic",
            "type": "bool"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "minimunEntry",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "price",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "endAt",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "supply",
            "type": "uint256"
          }
        ],
        "name": "PhaseCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bool",
            "name": "over",
            "type": "bool"
          }
        ],
        "name": "PhaseOver",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "Purchase",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "previousAdminRole",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "newAdminRole",
            "type": "bytes32"
          }
        ],
        "name": "RoleAdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleGranted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleRevoked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "recipient",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Withdraw",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "WithdrawBUSD",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "BUSDaddress",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DEFAULT_ADMIN_ROLE",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "TOKEN",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "_accounts",
            "type": "address[]"
          }
        ],
        "name": "addToWhitelist",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenAmount",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_address",
            "type": "address"
          }
        ],
        "name": "addUsersToVesting",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "allIDSforUser",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenAmountDesired",
            "type": "uint256"
          }
        ],
        "name": "buyTokenWithBUSD",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenAmountDesired",
            "type": "uint256"
          }
        ],
        "name": "buyTokenWithToken",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "cancelPhase",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_newBUSDAddress",
            "type": "address"
          }
        ],
        "name": "changeBUSDAddress",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_dispatcher",
            "type": "address"
          }
        ],
        "name": "changeDispatcher",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_newEndDate",
            "type": "uint256"
          }
        ],
        "name": "changeEndDate",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_newAddress",
            "type": "address"
          }
        ],
        "name": "changeTokenAddress",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "_isPublic",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "_minimunEntry",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_price",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_endAt",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_supply",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_timeLock",
            "type": "uint256"
          },
          {
            "internalType": "uint256[]",
            "name": "_timesToRelease",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "_percentsToRelease",
            "type": "uint256[]"
          }
        ],
        "name": "createPhase",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "currentPhase",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "dispatcher",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getCurrentSupplyRemain",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_address",
            "type": "address"
          }
        ],
        "name": "getIDs",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getLatestPrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "getPercentsToReleaseForID",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          }
        ],
        "name": "getRoleAdmin",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "getTimesToReleaseForID",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getVestingPercentPhase",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getVestingTimePhase",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "getWhenIsTheNextClaim",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getWhitelist",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getcurrentPhase",
        "outputs": [
          {
            "components": [
              {
                "internalType": "bool",
                "name": "isPublic",
                "type": "bool"
              },
              {
                "internalType": "uint256",
                "name": "minimunEntry",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "price",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "endAt",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "supply",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "over",
                "type": "bool"
              },
              {
                "internalType": "uint256",
                "name": "timelock",
                "type": "uint256"
              },
              {
                "internalType": "uint256[]",
                "name": "timesToRelease",
                "type": "uint256[]"
              },
              {
                "internalType": "uint256[]",
                "name": "percentsToRelease",
                "type": "uint256[]"
              }
            ],
            "internalType": "struct Sale.Phase",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "grantRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "hasRole",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "id",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_maxSupply",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_dispatcher",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_tokenAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_BUSDADDRESS",
            "type": "address"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "phases",
        "outputs": [
          {
            "internalType": "bool",
            "name": "isPublic",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "minimunEntry",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "price",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "endAt",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "supply",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "over",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "timelock",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "release",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "removeWhitelistedAddress",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "renounceRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "revokeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_usdtAddress",
            "type": "address"
          }
        ],
        "name": "setTOKENAddress",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "showMyRemainAmount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "showMyToClaimAllAmount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "showMyToClaimAmount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "showMyinitAmount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "tokenAddress",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "tokenLocksForSale",
        "outputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "initAmount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "remainAmount",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "tokensRemainForSale",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "whitelistArr",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "withdrawBUSD",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "transactionHash": "0x89508c9d2b2ae6e3ca03eec3584d9b7bfdd239e6ab47aa173a1432f00b8f5a58",
    "receipt": {
      "to": null,
      "from": "0xA46765F80B9977F92AC39f722859b2e156A24b8C",
      "contractAddress": "0x2cf92f544Fb77C25fD89D7c61334beFa4e88bbd3",
      "transactionIndex": 4,
      "gasUsed": "3342781",
      "logsBloom": "0x
      "blockHash": "0x7a948cf922a994b3f3d95a61aba8f4d327c91978b112985f78c371a6dce1400f",
      "transactionHash": "0x89508c9d2b2ae6e3ca03eec3584d9b7bfdd239e6ab47aa173a1432f00b8f5a58",
      "logs": [],
      "blockNumber": 29840867,
      "cumulativeGasUsed": "3525078",
      "status": 1,
      "byzantium": true
    },
    "args": [],
    "solcInputHash": "4a4d4adc14f7c149df65bb400a48614c",
    "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPhase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddUsersToVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Claims\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"DispatcherChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimunEntry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"PhaseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"}],\"name\":\"PhaseOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBUSD\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSDaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addUsersToVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allIDSforUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmountDesired\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmountDesired\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBUSDAddress\",\"type\":\"address\"}],\"name\":\"changeBUSDAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"}],\"name\":\"changeDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEndDate\",\"type\":\"uint256\"}],\"name\":\"changeEndDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPublic\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minimunEntry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_timesToRelease\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentsToRelease\",\"type\":\"uint256[]\"}],\"name\":\"createPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSupplyRemain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPercentsToReleaseForID\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTimesToReleaseForID\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingPercentPhase\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingTimePhase\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getWhenIsTheNextClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getcurrentPhase\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minimunEntry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"timesToRelease\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentsToRelease\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Sale.Phase\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BUSDADDRESS\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minimunEntry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"over\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"name\":\"setTOKENAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"showMyRemainAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"showMyToClaimAllAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"showMyToClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"showMyinitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLocksForSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensRemainForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistArr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"crisolita\",\"kind\":\"dev\",\"methods\":{\"changeEndDate(uint256)\":{\"details\":\"change the end date's phase\"},\"changeTokenAddress(address)\":{\"details\":\"change the token address\"},\"getIDs(address)\":{\"details\":\"see the tokens lock and id for every user\"},\"getLatestPrice()\":{\"details\":\"get the usd/BNB price\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"showMyToClaimAllAmount(uint256)\":{\"details\":\"mostrar lo que tiene disponible para claimear\"},\"showMyinitAmount(uint256)\":{\"details\":\"time in lock\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Sale\",\"version\":1},\"userdoc\":{\"events\":{\"PhaseCreated(bool,uint256,uint256,uint256,uint256)\":{\"notice\":\"records creation  of phases\"},\"Purchase(address,uint256,uint256)\":{\"notice\":\"records the token transfers made by the contract\"}},\"kind\":\"user\",\"methods\":{\"BUSDaddress()\":{\"notice\":\"address of busd\"},\"TOKEN()\":{\"notice\":\"buy tokens with BUSD\"},\"addUsersToVesting(uint256,address)\":{\"notice\":\"add a list of wallet to vesting\"},\"allIDSforUser(address,uint256)\":{\"notice\":\"record the ids for users\"},\"buyTokenWithBUSD(uint256)\":{\"notice\":\"buy tokens with BUSD\"},\"changeBUSDAddress(address)\":{\"notice\":\"change the Busd address\"},\"changeDispatcher(address)\":{\"notice\":\"change account to transfer the contract balance\"},\"createPhase(bool,uint256,uint256,uint256,uint256,uint256,uint256[],uint256[])\":{\"notice\":\"add a phase to mapping\"},\"currentPhase()\":{\"notice\":\"reference for the mapping of phases, uint of the current phase\"},\"dispatcher()\":{\"notice\":\"wallet to transfer funds of the contract\"},\"getcurrentPhase()\":{\"notice\":\"get ongoing phase or the last phase over\"},\"phases(uint256)\":{\"notice\":\"all phases (next, current and previous)\"},\"tokenAddress()\":{\"notice\":\"address the token that user buys\"},\"tokensRemainForSale()\":{\"notice\":\"reference for the mapping of phases, uint of the total phasecurrent amount of tokens\"},\"whitelistArr(uint256)\":{\"notice\":\"records the changes of the wallet where the tokens are transferred\"},\"withdraw(address,uint256)\":{\"notice\":\"withdraw eth\"},\"withdrawBUSD(address,uint256)\":{\"notice\":\"withdraw busd\"}},\"notice\":\"this contract allow create phases for mint token and transfer the funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sale.sol\":\"Sale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x603946f0dc2541ff45f4b5cb1424ed1870eb24f3396cd318b1996e7e65278907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/Sale.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\n/// @title Sale\\n/// @author crisolita\\n/// @notice this contract allow create phases for mint token and transfer the funds\\ncontract Sale is\\n\\tInitializable,\\n\\tAccessControlUpgradeable,\\n\\tReentrancyGuardUpgradeable\\n{\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tAggregatorV3Interface private priceFeed;\\n\\t/// until amount N of token sold out or reaching a date or time is over\\n\\tstruct Phase {\\n\\t\\t// bool is the phase publici\\n\\t\\tbool isPublic;\\n\\t\\t// uint minimum amount of token\\n\\t\\tuint256 minimunEntry;\\n\\t\\t// uint price in usd\\n\\t\\tuint256 price;\\n\\t\\t// timestamp when this phase ends\\n\\t\\tuint256 endAt;\\n\\t\\t// uint that decreases when sold in phase\\n\\t\\t// @note to know the original supply look up in logs\\n\\t\\tuint256 supply;\\n\\t\\t// mark as finished the phase\\n\\t\\tbool over;\\n\\t\\t//time in days for lock tokens\\n\\t\\tuint256 timelock;\\n\\t\\t// pieces of time to release token\\n\\t\\tuint256[] timesToRelease;\\n\\t\\tuint256[] percentsToRelease;\\n\\t}\\n\\tstruct TokenTimelock {\\n\\t\\taddress owner;\\n\\t\\tuint256 initAmount;\\n\\t\\tuint256 remainAmount;\\n\\t\\tuint256[] timesToRelease;\\n\\t\\tuint256[] percentsToRelease;\\n\\t\\tmapping(uint256 => bool) released;\\n\\t}\\n\\n\\t/// all phases (next, current and previous)\\n\\tmapping(uint256 => Phase) public phases;\\n\\t/// record the ids for users\\n\\tmapping(address => uint256[]) public allIDSforUser;\\n\\t// only the private wallets\\n\\tmapping(address => bool) private whitelist;\\n\\t//address with amount and time for timelock\\n\\tmapping(uint256 => TokenTimelock) public tokenLocksForSale;\\n\\t/// reference for the mapping of phases, uint of the current phase\\n\\tuint256 public currentPhase;\\n\\t//  ID for every sale\\n\\tuint256 public id;\\n\\t/// reference for the mapping of phases, uint of the total phase\\n\\t/// @notice current amount of tokens\\n\\tuint256 public tokensRemainForSale;\\n\\t/// @notice wallet to transfer funds of the contract\\n\\taddress public dispatcher;\\n\\t/// @notice address the token that user buys\\n\\taddress public tokenAddress;\\n\\t///@notice address of busd\\n\\taddress public BUSDaddress;\\n\\t/// records the changes of the wallet where the tokens are transferred\\n\\taddress[] public whitelistArr;\\n\\tevent DispatcherChange(address indexed dispatcher);\\n\\t/// records the token transfers made by the contract\\n\\tevent Purchase(address indexed account, uint256 amount, uint256 id);\\n\\t//event to control withdraw\\n\\tevent Withdraw(address recipient, uint256 amount);\\n\\t/// records creation  of phases\\n\\tevent PhaseCreated(\\n\\t\\tbool isPublic,\\n\\t\\tuint256 minimunEntry,\\n\\t\\tuint256 price,\\n\\t\\tuint256 endAt,\\n\\t\\tuint256 supply\\n\\t);\\n\\tevent PhaseOver(bool over);\\n\\tevent Claims(address buyer, uint256 id);\\n\\tevent WithdrawBUSD(address account, uint256 amount);\\n\\n\\tfunction initialize(\\n\\t\\tuint256 _maxSupply,\\n\\t\\taddress _dispatcher,\\n\\t\\taddress _tokenAddress,\\n\\t\\taddress _BUSDADDRESS\\n\\t) public initializer {\\n\\t\\t__AccessControl_init();\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\t\\tcurrentPhase = 0;\\n\\t\\ttokensRemainForSale = _maxSupply;\\n\\t\\tdispatcher = _dispatcher;\\n\\t\\ttokenAddress = _tokenAddress;\\n\\t\\tphases[currentPhase].over = true;\\n\\t\\tBUSDaddress = _BUSDADDRESS;\\n\\t}\\n\\n\\t//receive a bool and make the access possible\\n\\tmodifier isPublicSale() {\\n\\t\\tif (!phases[currentPhase].isPublic) {\\n\\t\\t\\trequire(whitelist[msg.sender], \\\"This phase is private\\\");\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t///@notice buy tokens with BUSD\\n\\n\\tfunction buyTokenWithBUSD(\\n\\t\\tuint256 _tokenAmountDesired\\n\\t) public isPublicSale nonReentrant {\\n\\t\\tuint256 finalPrice = _tokenAmountDesired\\n\\t\\t\\t.mul(phases[currentPhase].price)\\n\\t\\t\\t.div(10 ** 18);\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp < phases[currentPhase].endAt,\\n\\t\\t\\t\\\"This phase is over, wait for the next\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tphases[currentPhase].supply >= _tokenAmountDesired,\\n\\t\\t\\t\\\"Not enough supply\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\t_tokenAmountDesired >= phases[currentPhase].minimunEntry,\\n\\t\\t\\t\\\"There are too few tokens\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tERC20(BUSDaddress).transferFrom(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tfinalPrice\\n\\t\\t\\t),\\n\\t\\t\\t\\\"Failed transfer BUSD\\\"\\n\\t\\t);\\n\\t\\tid++;\\n\\t\\tif (phases[currentPhase].timelock > 0) {\\n\\t\\t\\ttokenLocksForSale[id].owner = msg.sender;\\n\\t\\t\\ttokenLocksForSale[id].initAmount = _tokenAmountDesired;\\n\\t\\t\\ttokenLocksForSale[id].remainAmount = _tokenAmountDesired;\\n\\t\\t\\tgetTimeToPresent(phases[currentPhase].timesToRelease);\\n\\t\\t\\ttokenLocksForSale[id].percentsToRelease = phases[currentPhase]\\n\\t\\t\\t\\t.percentsToRelease;\\n\\t\\t} else {\\n\\t\\t\\tERC20(tokenAddress).transfer(msg.sender, _tokenAmountDesired);\\n\\t\\t}\\n\\n\\t\\tallIDSforUser[msg.sender].push(id);\\n\\n\\t\\t/// change current phase total supply\\n\\t\\tphases[currentPhase].supply -= _tokenAmountDesired;\\n\\n\\t\\tif (phases[currentPhase].supply == 0) {\\n\\t\\t\\tphases[currentPhase].over = true;\\n\\t\\t\\temit PhaseOver(true);\\n\\t\\t}\\n\\n\\t\\ttokensRemainForSale -= _tokenAmountDesired;\\n\\n\\t\\temit Purchase(msg.sender, _tokenAmountDesired, id);\\n\\t}\\n\\n\\t//release the tokens at time\\n\\n\\tfunction release(uint256 _id) public returns (bool) {\\n\\t\\tbool successClaim;\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == tokenLocksForSale[_id].owner,\\n\\t\\t\\t\\\"This is not your id\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttokenLocksForSale[_id].remainAmount > 0,\\n\\t\\t\\t\\\"Already claim tokens\\\"\\n\\t\\t);\\n\\t\\tfor (\\n\\t\\t\\tuint256 i = 0;\\n\\t\\t\\ti < tokenLocksForSale[_id].timesToRelease.length;\\n\\t\\t\\ti++\\n\\t\\t) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tblock.timestamp >= tokenLocksForSale[_id].timesToRelease[i] &&\\n\\t\\t\\t\\t!tokenLocksForSale[_id].released[\\n\\t\\t\\t\\t\\ttokenLocksForSale[_id].timesToRelease[i]\\n\\t\\t\\t\\t]\\n\\t\\t\\t) {\\n\\t\\t\\t\\tERC20(tokenAddress).transfer(\\n\\t\\t\\t\\t\\ttokenLocksForSale[_id].owner,\\n\\t\\t\\t\\t\\t(tokenLocksForSale[_id].initAmount *\\n\\t\\t\\t\\t\\t\\ttokenLocksForSale[_id].percentsToRelease[i]) / 100\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\ttokenLocksForSale[_id].released[\\n\\t\\t\\t\\t\\ttokenLocksForSale[_id].timesToRelease[i]\\n\\t\\t\\t\\t] = true;\\n\\t\\t\\t\\ttokenLocksForSale[_id].remainAmount -=\\n\\t\\t\\t\\t\\t(tokenLocksForSale[_id].initAmount *\\n\\t\\t\\t\\t\\t\\ttokenLocksForSale[_id].percentsToRelease[i]) /\\n\\t\\t\\t\\t\\t100;\\n\\n\\t\\t\\t\\tsuccessClaim = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trequire(successClaim, \\\"Current time is before release time\\\");\\n\\t\\temit Claims(tokenLocksForSale[_id].owner, id);\\n\\t\\treturn successClaim;\\n\\t}\\n\\n\\t///@notice VIEW FUNCTIONS\\n\\n\\t///@dev see the tokens lock and id for every user\\n\\tfunction getIDs(address _address) public view returns (uint256[] memory) {\\n\\t\\treturn allIDSforUser[_address];\\n\\t}\\n\\n\\t///@dev time in lock\\n\\tfunction showMyinitAmount(uint256 _id) public view returns (uint256) {\\n\\t\\treturn (tokenLocksForSale[_id].initAmount);\\n\\t}\\n\\n\\tfunction showMyRemainAmount(uint256 _id) public view returns (uint256) {\\n\\t\\treturn (tokenLocksForSale[_id].remainAmount);\\n\\t}\\n\\n\\t///@dev see the amount of token lock\\n\\n\\t///@dev get the usd/BNB price\\n\\tfunction getLatestPrice() public view returns (uint256) {\\n\\t\\t(, int256 price, , , ) = priceFeed.latestRoundData();\\n\\t\\treturn uint256(price) * 10 ** 10;\\n\\t}\\n\\n\\t/// @notice get ongoing phase or the last phase over\\n\\tfunction getcurrentPhase() external view returns (Phase memory) {\\n\\t\\treturn phases[currentPhase];\\n\\t}\\n\\n\\tfunction getCurrentSupplyRemain() external view returns (uint256) {\\n\\t\\treturn phases[currentPhase].supply;\\n\\t}\\n\\n\\tfunction getVestingTimePhase() external view returns (uint256[] memory) {\\n\\t\\treturn phases[currentPhase].timesToRelease;\\n\\t}\\n\\n\\tfunction getVestingPercentPhase() external view returns (uint256[] memory) {\\n\\t\\treturn phases[currentPhase].percentsToRelease;\\n\\t}\\n\\n\\tfunction getWhenIsTheNextClaim(uint256 _id) public view returns (uint256) {\\n\\t\\tfor (\\n\\t\\t\\tuint256 i = 0;\\n\\t\\t\\ti < tokenLocksForSale[_id].timesToRelease.length;\\n\\t\\t\\ti++\\n\\t\\t) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t!tokenLocksForSale[_id].released[\\n\\t\\t\\t\\t\\ttokenLocksForSale[_id].timesToRelease[i]\\n\\t\\t\\t\\t]\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn tokenLocksForSale[_id].timesToRelease[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction getPercentsToReleaseForID(\\n\\t\\tuint256 _id\\n\\t) public view returns (uint256[] memory) {\\n\\t\\treturn tokenLocksForSale[_id].percentsToRelease;\\n\\t}\\n\\n\\tfunction getTimesToReleaseForID(\\n\\t\\tuint256 _id\\n\\t) public view returns (uint256[] memory) {\\n\\t\\treturn tokenLocksForSale[_id].timesToRelease;\\n\\t}\\n\\n\\tfunction getWhitelist() public view returns (address[] memory) {\\n\\t\\treturn whitelistArr;\\n\\t}\\n\\n\\tfunction setTimeAndPercent(\\n\\t\\tuint256[] memory _times,\\n\\t\\tuint256[] memory _percents\\n\\t) internal pure returns (bool success) {\\n\\t\\trequire(_times.length == _percents.length, \\\"No match entry\\\");\\n\\t\\tuint256 count1 = 0;\\n\\t\\tfor (uint256 i = 0; i < _times.length; i++) {\\n\\t\\t\\trequire(_times[i] > 0, \\\"No time\\\");\\n\\t\\t\\trequire(_percents[i] > 0, \\\"No percent\\\");\\n\\t\\t\\tcount1 += _percents[i];\\n\\t\\t}\\n\\t\\trequire(count1 == 100, \\\"Percentages do not add to 100\\\");\\n\\t\\treturn success = true;\\n\\t}\\n\\n\\tfunction getTimeToPresent(uint256[] memory _timesToRelease) internal {\\n\\t\\tfor (uint256 i = 0; i < _timesToRelease.length; i++) {\\n\\t\\t\\ttokenLocksForSale[id].timesToRelease.push(\\n\\t\\t\\t\\tblock.timestamp + _timesToRelease[i]\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t///@notice ONLYOWNER FUNCTIONS\\n\\n\\t/// @notice add a phase to mapping\\n\\tfunction createPhase(\\n\\t\\tbool _isPublic,\\n\\t\\tuint256 _minimunEntry,\\n\\t\\tuint256 _price,\\n\\t\\tuint256 _endAt,\\n\\t\\tuint256 _supply,\\n\\t\\tuint256 _timeLock,\\n\\t\\tuint256[] memory _timesToRelease,\\n\\t\\tuint256[] memory _percentsToRelease\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tif (block.timestamp > phases[currentPhase].endAt) {\\n\\t\\t\\tphases[currentPhase].over = true;\\n\\t\\t}\\n\\t\\trequire(\\n\\t\\t\\tsetTimeAndPercent(_timesToRelease, _percentsToRelease),\\n\\t\\t\\t\\\"Wrong timetoRelease or percents parameters\\\"\\n\\t\\t);\\n\\t\\trequire(phases[currentPhase].over, \\\"This phase isn't over\\\");\\n\\t\\tif (phases[currentPhase].supply > 0) {\\n\\t\\t\\tERC20(tokenAddress).transfer(\\n\\t\\t\\t\\tdispatcher,\\n\\t\\t\\t\\tphases[currentPhase].supply\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp < _endAt,\\n\\t\\t\\t\\\"The end of the phase should be greater than now\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_supply > _minimunEntry,\\n\\t\\t\\t\\\"Supply should be greater than minimum entry\\\"\\n\\t\\t);\\n\\t\\trequire(tokensRemainForSale >= _supply, \\\"Not enough supply to mint\\\");\\n\\t\\trequire(\\n\\t\\t\\tERC20(tokenAddress).transferFrom(\\n\\t\\t\\t\\tdispatcher,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t_supply\\n\\t\\t\\t),\\n\\t\\t\\t\\\"The token could not be transferred to the phase\\\"\\n\\t\\t);\\n\\t\\tcurrentPhase++;\\n\\t\\tPhase memory p = Phase(\\n\\t\\t\\t_isPublic,\\n\\t\\t\\t_minimunEntry,\\n\\t\\t\\t_price,\\n\\t\\t\\t_endAt,\\n\\t\\t\\t_supply,\\n\\t\\t\\tfalse,\\n\\t\\t\\t_timeLock,\\n\\t\\t\\t_timesToRelease,\\n\\t\\t\\t_percentsToRelease\\n\\t\\t);\\n\\t\\tphases[currentPhase] = p;\\n\\n\\t\\temit PhaseCreated(_isPublic, _minimunEntry, _price, _endAt, _supply);\\n\\t}\\n\\n\\t/// @notice change account to transfer the contract balance\\n\\tfunction changeDispatcher(\\n\\t\\taddress _dispatcher\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\temit DispatcherChange(_dispatcher);\\n\\t\\tdispatcher = _dispatcher;\\n\\t}\\n\\n\\t/// @notice change the Busd address\\n\\tfunction changeBUSDAddress(\\n\\t\\taddress _newBUSDAddress\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tBUSDaddress = _newBUSDAddress;\\n\\t}\\n\\n\\tfunction cancelPhase() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trequire(\\n\\t\\t\\tphases[currentPhase].over == false,\\n\\t\\t\\t\\\"This phase is over, wait for the next\\\"\\n\\t\\t);\\n\\t\\tif (phases[currentPhase].supply > 0) {\\n\\t\\t\\tERC20(tokenAddress).transfer(\\n\\t\\t\\t\\tdispatcher,\\n\\t\\t\\t\\tphases[currentPhase].supply\\n\\t\\t\\t);\\n\\t\\t\\tphases[currentPhase].supply = 0;\\n\\t\\t}\\n\\t\\tphases[currentPhase].over = true;\\n\\t\\temit PhaseOver(true);\\n\\t}\\n\\n\\tfunction addToWhitelist(\\n\\t\\taddress[] memory _accounts\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tfor (uint256 i = 0; i < _accounts.length; i++) {\\n\\t\\t\\twhitelist[_accounts[i]] = true;\\n\\t\\t}\\n\\t\\twhitelistArr = _accounts;\\n\\t}\\n\\n\\tfunction removeWhitelistedAddress() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tfor (uint256 i = 0; i < whitelistArr.length; i++) {\\n\\t\\t\\twhitelist[whitelistArr[i]] = false;\\n\\t\\t\\tdelete whitelistArr[i];\\n\\t\\t}\\n\\t}\\n\\n\\t///@dev change the end date's phase\\n\\tfunction changeEndDate(\\n\\t\\tuint256 _newEndDate\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trequire(block.timestamp < _newEndDate);\\n\\t\\tphases[currentPhase].endAt = _newEndDate;\\n\\t}\\n\\n\\t///@dev change the token address\\n\\tfunction changeTokenAddress(\\n\\t\\taddress _newAddress\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\ttokenAddress = _newAddress;\\n\\t}\\n\\n\\t/// @notice withdraw eth\\n\\tfunction withdraw(\\n\\t\\taddress _account,\\n\\t\\tuint256 _amount\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n\\t\\tpayable(_account).transfer(_amount);\\n\\t\\temit Withdraw(_account, _amount);\\n\\t}\\n\\n\\t///@notice withdraw busd\\n\\tfunction withdrawBUSD(\\n\\t\\taddress _account,\\n\\t\\tuint256 _amount\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n\\t\\trequire(\\n\\t\\t\\tERC20(BUSDaddress).transfer(_account, _amount),\\n\\t\\t\\t\\\"Failed busd transfer\\\"\\n\\t\\t);\\n\\t\\temit WithdrawBUSD(_account, _amount);\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\t/// a partir de aqui voy a hacer la actualizacion\\n\\n\\t///@notice buy tokens with BUSD\\n\\taddress public TOKEN;\\n\\tevent AddUsersToVesting(\\n\\t\\tuint currentPhase,\\n\\t\\tuint _tokenAmount,\\n\\t\\taddress _address\\n\\t);\\n\\n\\tfunction showMyToClaimAmount(uint256 _id) public view returns (uint256) {\\n\\t\\tfor (\\n\\t\\t\\tuint256 i = 0;\\n\\t\\t\\ti < tokenLocksForSale[_id].timesToRelease.length;\\n\\t\\t\\ti++\\n\\t\\t) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t!tokenLocksForSale[_id].released[\\n\\t\\t\\t\\t\\ttokenLocksForSale[_id].timesToRelease[i]\\n\\t\\t\\t\\t]\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn\\n\\t\\t\\t\\t\\ttokenLocksForSale[_id].initAmount *\\n\\t\\t\\t\\t\\ttokenLocksForSale[_id].percentsToRelease[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction setTOKENAddress(\\n\\t\\taddress _usdtAddress\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tTOKEN = _usdtAddress;\\n\\t}\\n\\n\\tfunction buyTokenWithToken(\\n\\t\\tuint256 _tokenAmountDesired\\n\\t) public isPublicSale nonReentrant {\\n\\t\\trequire(TOKEN != address(0));\\n\\t\\tuint256 finalPrice = _tokenAmountDesired\\n\\t\\t\\t.mul(phases[currentPhase].price)\\n\\t\\t\\t.div(10 ** 18);\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp < phases[currentPhase].endAt,\\n\\t\\t\\t\\\"This phase is over, wait for the next\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tphases[currentPhase].supply >= _tokenAmountDesired,\\n\\t\\t\\t\\\"Not enough supply\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\t_tokenAmountDesired >= phases[currentPhase].minimunEntry,\\n\\t\\t\\t\\\"There are too few tokens\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tERC20(TOKEN).transferFrom(msg.sender, address(this), finalPrice),\\n\\t\\t\\t\\\"Failed transfer BUSD\\\"\\n\\t\\t);\\n\\t\\tid++;\\n\\t\\tif (phases[currentPhase].timelock > 0) {\\n\\t\\t\\ttokenLocksForSale[id].owner = msg.sender;\\n\\t\\t\\ttokenLocksForSale[id].initAmount = _tokenAmountDesired;\\n\\t\\t\\ttokenLocksForSale[id].remainAmount = _tokenAmountDesired;\\n\\t\\t\\tgetTimeToPresent(phases[currentPhase].timesToRelease);\\n\\t\\t\\ttokenLocksForSale[id].percentsToRelease = phases[currentPhase]\\n\\t\\t\\t\\t.percentsToRelease;\\n\\t\\t} else {\\n\\t\\t\\tERC20(tokenAddress).transfer(msg.sender, _tokenAmountDesired);\\n\\t\\t}\\n\\n\\t\\tallIDSforUser[msg.sender].push(id);\\n\\n\\t\\t/// change current phase total supply\\n\\t\\tphases[currentPhase].supply -= _tokenAmountDesired;\\n\\n\\t\\tif (phases[currentPhase].supply == 0) {\\n\\t\\t\\tphases[currentPhase].over = true;\\n\\t\\t\\temit PhaseOver(true);\\n\\t\\t}\\n\\n\\t\\ttokensRemainForSale -= _tokenAmountDesired;\\n\\n\\t\\temit Purchase(msg.sender, _tokenAmountDesired, id);\\n\\t}\\n\\n\\t///@notice add a list of wallet to vesting\\n\\tfunction addUsersToVesting(\\n\\t\\tuint256 _tokenAmount,\\n\\t\\taddress _address\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp < phases[currentPhase].endAt,\\n\\t\\t\\t\\\"This phase is over, wait for the next\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tphases[currentPhase].supply >= _tokenAmount,\\n\\t\\t\\t\\\"Not enough supply\\\"\\n\\t\\t);\\n\\n\\t\\tif (phases[currentPhase].timelock > 0) {\\n\\t\\t\\tid++;\\n\\t\\t\\tallIDSforUser[_address].push(id);\\n\\t\\t\\ttokenLocksForSale[id].owner = _address;\\n\\t\\t\\ttokenLocksForSale[id].initAmount = _tokenAmount;\\n\\t\\t\\ttokenLocksForSale[id].remainAmount = _tokenAmount;\\n\\t\\t\\tgetTimeToPresent(phases[currentPhase].timesToRelease);\\n\\t\\t\\ttokenLocksForSale[id].percentsToRelease = phases[currentPhase]\\n\\t\\t\\t\\t.percentsToRelease;\\n\\t\\t} else {\\n\\t\\t\\tERC20(tokenAddress).transfer(_address, _tokenAmount);\\n\\t\\t}\\n\\t\\tphases[currentPhase].supply -= _tokenAmount;\\n\\n\\t\\tif (phases[currentPhase].supply == 0) {\\n\\t\\t\\tphases[currentPhase].over = true;\\n\\t\\t}\\n\\t\\ttokensRemainForSale -= _tokenAmount;\\n\\t\\temit AddUsersToVesting(currentPhase, _tokenAmount, _address);\\n\\t}\\n\\n\\t/// @dev mostrar lo que tiene disponible para claimear\\n\\tfunction showMyToClaimAllAmount(uint256 _id) public view returns (uint256) {\\n\\t\\tuint cuenta = 0;\\n\\t\\tfor (\\n\\t\\t\\tuint256 i = 0;\\n\\t\\t\\ti < tokenLocksForSale[_id].timesToRelease.length;\\n\\t\\t\\ti++\\n\\t\\t) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t!tokenLocksForSale[_id].released[\\n\\t\\t\\t\\t\\ttokenLocksForSale[_id].timesToRelease[i]\\n\\t\\t\\t\\t] && block.timestamp >= tokenLocksForSale[_id].timesToRelease[i]\\n\\t\\t\\t) {\\n\\t\\t\\t\\tcuenta =\\n\\t\\t\\t\\t\\tcuenta +\\n\\t\\t\\t\\t\\t(tokenLocksForSale[_id].initAmount *\\n\\t\\t\\t\\t\\t\\ttokenLocksForSale[_id].percentsToRelease[i]) /\\n\\t\\t\\t\\t\\t(100);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tconsole.log(cuenta, \\\"cuenta\\\");\\n\\t\\treturn cuenta;\\n\\t}\\n}\\n\",\"keccak256\":\"0xf16b91853889e1e266fa8ffbdc14d0924a755f17b14117cc76ac5faf32b24d0c\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x608060405234801561001057600080fd5b50613b85806100206000396000f3fe6080604052600436106102975760003560e01c8063916385f81161015a578063cb7e9057116100c1578063f3fef3a31161007a578063f3fef3a3146108c6578063f795077b146108e6578063f8185702146108fb578063f8ad78941461091b578063fadcb54c1461093b578063fd7ddc6f1461095b57600080fd5b8063cb7e905714610804578063cc58cede14610824578063d01f63f514610844578063d547741f14610866578063ee356ec014610886578063f2241738146108a657600080fd5b8063af640d0f11610113578063af640d0f1461074c578063b68f027714610762578063bb543f5f14610782578063be38341d146107a4578063c930d143146107c4578063c9cda91f146107e457600080fd5b8063916385f81461069157806391d14854146106c15780639ba81a3c146106e15780639d76ea58146107015780639def891014610721578063a217fddf1461073757600080fd5b80633d2d1900116101fe5780637e2be3a3116101b75780637e2be3a3146105915780637f649783146105b15780637f811d4f146105d157806382bfefc81461063c5780638a44b0441461065c5780638e15f4731461067c57600080fd5b80633d2d1900146104b057806345737b1e146104d257806362d0dd0e146104f2578063699de16214610519578063754d1d54146105395780637a67bbfd1461055957600080fd5b8063248a9ca311610250578063248a9ca3146103735780632e37eef6146103a35780632f2ff15d1461043b57806334279b681461045b57806336568abe1461047057806337bdc99b1461049057600080fd5b806301ffc9a7146102a3578063044b3704146102d8578063055ad42e146103065780630a33c90a1461031c5780630f25941a1461033e578063229f024f1461035357600080fd5b3661029e57005b600080fd5b3480156102af57600080fd5b506102c36102be36600461360d565b61098b565b60405190151581526020015b60405180910390f35b3480156102e457600080fd5b506102f86102f336600461343b565b6109c2565b6040519081526020016102cf565b34801561031257600080fd5b506102f860ce5481565b34801561032857600080fd5b5061033c610337366004613420565b6109f3565b005b34801561034a57600080fd5b5061033c610a56565b34801561035f57600080fd5b5061033c61036e366004613420565b610bcd565b34801561037f57600080fd5b506102f861038e3660046135c8565b60009081526065602052604090206001015490565b3480156103af57600080fd5b506104026103be3660046135c8565b60ca60205260009081526040902080546001820154600283015460038401546004850154600586015460069096015460ff9586169694959394929391929091169087565b60408051971515885260208801969096529486019390935260608501919091526080840152151560a083015260c082015260e0016102cf565b34801561044757600080fd5b5061033c6104563660046135e1565b610bfc565b34801561046757600080fd5b5061033c610c27565b34801561047c57600080fd5b5061033c61048b3660046135e1565b610cd0565b34801561049c57600080fd5b506102c36104ab3660046135c8565b610d4a565b3480156104bc57600080fd5b506104c561114a565b6040516102cf91906137fd565b3480156104de57600080fd5b5061033c6104ed3660046135c8565b6111b0565b3480156104fe57600080fd5b5060ce54600090815260ca60205260409020600401546102f8565b34801561052557600080fd5b5061033c6105343660046135e1565b6111e0565b34801561054557600080fd5b5061033c610554366004613637565b6114d2565b34801561056557600080fd5b5060d354610579906001600160a01b031681565b6040516001600160a01b0390911681526020016102cf565b34801561059d57600080fd5b506102f86105ac3660046135c8565b6115cf565b3480156105bd57600080fd5b5061033c6105cc366004613465565b61168b565b3480156105dd57600080fd5b506106176105ec3660046135c8565b60cd602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b0390941684526020840192909252908201526060016102cf565b34801561064857600080fd5b5060d554610579906001600160a01b031681565b34801561066857600080fd5b506102f86106773660046135c8565b611713565b34801561068857600080fd5b506102f86117e6565b34801561069d57600080fd5b506102f86106ac3660046135c8565b600090815260cd602052604090206002015490565b3480156106cd57600080fd5b506102c36106dc3660046135e1565b61188c565b3480156106ed57600080fd5b506104c56106fc3660046135c8565b6118b7565b34801561070d57600080fd5b5060d254610579906001600160a01b031681565b34801561072d57600080fd5b506102f860d05481565b34801561074357600080fd5b506102f8600081565b34801561075857600080fd5b506102f860cf5481565b34801561076e57600080fd5b506104c561077d3660046135c8565b61191c565b34801561078e57600080fd5b5061079761197f565b6040516102cf9190613918565b3480156107b057600080fd5b506105796107bf3660046135c8565b611aed565b3480156107d057600080fd5b5061033c6107df366004613420565b611b17565b3480156107f057600080fd5b5061033c6107ff366004613420565b611b46565b34801561081057600080fd5b5060d154610579906001600160a01b031681565b34801561083057600080fd5b5061033c61083f3660046135c8565b611b75565b34801561085057600080fd5b50610859612099565b6040516102cf91906137b0565b34801561087257600080fd5b5061033c6108813660046135e1565b6120fa565b34801561089257600080fd5b5061033c6108a13660046135c8565b612120565b3480156108b257600080fd5b5061033c6108c136600461343b565b6122ee565b3480156108d257600080fd5b5061033c6108e136600461343b565b612438565b3480156108f257600080fd5b506104c56124e2565b34801561090757600080fd5b506104c5610916366004613420565b612546565b34801561092757600080fd5b506102f86109363660046135c8565b6125b0565b34801561094757600080fd5b5061033c610956366004613521565b6126fc565b34801561096757600080fd5b506102f86109763660046135c8565b600090815260cd602052604090206001015490565b60006001600160e01b03198216637965db0b60e01b14806109bc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60cb60205281600052604060002081815481106109de57600080fd5b90600052602060002001600091509150505481565b60006109ff8133612c21565b6040516001600160a01b038316907f92b885c3da6a6d52c13130f8dcaa55efff1188d78078bd0aac02fc01ed493faf90600090a25060d180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610a628133612c21565b60ce54600090815260ca602052604090206005015460ff1615610aa05760405162461bcd60e51b8152600401610a979061384e565b60405180910390fd5b60ce54600090815260ca602052604090206004015415610b745760d25460d15460ce54600090815260ca602052604090819020600490810154915163a9059cbb60e01b81526001600160a01b0393841691810191909152602481019190915291169063a9059cbb90604401602060405180830381600087803b158015610b2557600080fd5b505af1158015610b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5d9190613504565b5060ce54600090815260ca60205260408120600401555b60ce54600090815260ca6020908152604091829020600501805460ff1916600190811790915591519182527f0773b1bc4292ec2db340bde1f65478f936986eaca8deee2c306b42c31c27f4ad910160405180910390a150565b6000610bd98133612c21565b5060d380546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260656020526040902060010154610c188133612c21565b610c228383612c85565b505050565b6000610c338133612c21565b60005b60d454811015610ccc57600060cc600060d48481548110610c5957610c59613b15565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905560d4805482908110610ca157610ca1613b15565b600091825260209091200180546001600160a01b031916905580610cc481613ae4565b915050610c36565b5050565b6001600160a01b0381163314610d405760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a97565b610ccc8282612d0b565b600081815260cd602052604081205481906001600160a01b03163314610da85760405162461bcd60e51b8152602060048201526013602482015272151a1a5cc81a5cc81b9bdd081e5bdd5c881a59606a1b6044820152606401610a97565b600083815260cd6020526040902060020154610dfd5760405162461bcd60e51b8152602060048201526014602482015273416c726561647920636c61696d20746f6b656e7360601b6044820152606401610a97565b60005b600084815260cd602052604090206003015481101561109357600084815260cd60205260409020600301805482908110610e3c57610e3c613b15565b90600052602060002001544210158015610e9d5750600084815260cd602052604081206003810180546005909201929184908110610e7c57610e7c613b15565b6000918252602080832090910154835282019290925260400190205460ff16155b156110815760d254600085815260cd602052604090208054600490910180546001600160a01b039384169363a9059cbb93169160649186908110610ee357610ee3613b15565b906000526020600020015460cd60008a815260200190815260200160002060010154610f0f9190613a67565b610f199190613a45565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610f5f57600080fd5b505af1158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f979190613504565b50600084815260cd60205260408120600381018054600193600590930192919085908110610fc757610fc7613b15565b9060005260206000200154815260200190815260200160002060006101000a81548160ff021916908315150217905550606460cd6000868152602001908152602001600020600401828154811061102057611020613b15565b906000526020600020015460cd60008781526020019081526020016000206001015461104c9190613a67565b6110569190613a45565b600085815260cd602052604081206002018054909190611077908490613a86565b9091555060019250505b8061108b81613ae4565b915050610e00565b50806110ed5760405162461bcd60e51b815260206004820152602360248201527f43757272656e742074696d65206973206265666f72652072656c656173652074604482015262696d6560e81b6064820152608401610a97565b600083815260cd60209081526040918290205460cf5483516001600160a01b039092168252918101919091527fc88fae5b8386808973dd739aabbcdc7b9a247773ca88a1338c13730eadcf198a910160405180910390a192915050565b60ce54600090815260ca60209081526040918290206008018054835181840281018401909452808452606093928301828280156111a657602002820191906000526020600020905b815481526020019060010190808311611192575b5050505050905090565b60006111bc8133612c21565b8142106111c857600080fd5b5060ce54600090815260ca6020526040902060030155565b60006111ec8133612c21565b60ce54600090815260ca6020526040902060030154421061121f5760405162461bcd60e51b8152600401610a979061384e565b60ce54600090815260ca60205260409020600401548311156112535760405162461bcd60e51b8152600401610a9790613823565b60ce54600090815260ca6020526040902060060154156113825760cf805490600061127d83613ae4565b90915550506001600160a01b038216600081815260cb6020908152604080832060cf805482546001818101855593875285872001558054855260cd845282852080546001600160a01b03191690961790955584548452818420018790559254825282822060020186905560ce54825260ca8152908290206007018054835181840281018401909452808452611346939283018282801561133c57602002820191906000526020600020905b815481526020019060010190808311611328575b5050505050612d72565b60ce54600090815260ca6020908152604080832060cf54845260cd9092529091206008909101805461137c926004019190613283565b5061140a565b60d25460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018690529091169063a9059cbb90604401602060405180830381600087803b1580156113d057600080fd5b505af11580156113e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114089190613504565b505b60ce54600090815260ca60205260408120600401805485929061142e908490613a86565b909155505060ce54600090815260ca602052604090206004015461146c5760ce54600090815260ca60205260409020600501805460ff191660011790555b8260d0600082825461147e9190613a86565b909155505060ce5460408051918252602082018590526001600160a01b03841682820152517fc45df7e0c5982c4770fdd0c17294d4104d8fce3389909de62cfd119a25e428f29181900360600190a1505050565b600054610100900460ff16806114eb575060005460ff16155b6115075760405162461bcd60e51b8152600401610a9790613893565b600054610100900460ff16158015611529576000805461ffff19166101011790555b611531612de3565b61153c600033612e67565b600060ce81905560d086905560d180546001600160a01b038088166001600160a01b03199283161790925560d2805487841690831617905591805260ca6020527f992e0e3e7050db88ec37ec33505f46a9813ea5551fe17ef58dc201344bcbaf98805460ff1916600117905560d380549185169190921617905580156115c8576000805461ff00191690555b5050505050565b6000805b600083815260cd602052604090206003015481101561168257600083815260cd60205260408120600381018054600590920192918490811061161757611617613b15565b6000918252602080832090910154835282019290925260400190205460ff1661167057600083815260cd6020526040902060030180548290811061165d5761165d613b15565b9060005260206000200154915050919050565b8061167a81613ae4565b9150506115d3565b50600092915050565b60006116978133612c21565b60005b82518110156116ff57600160cc60008584815181106116bb576116bb613b15565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806116f781613ae4565b91505061169a565b508151610c229060d49060208501906132d3565b6000805b600083815260cd602052604090206003015481101561168257600083815260cd60205260408120600381018054600590920192918490811061175b5761175b613b15565b6000918252602080832090910154835282019290925260400190205460ff166117d457600083815260cd602052604090206004018054829081106117a1576117a1613b15565b906000526020600020015460cd6000858152602001908152602001600020600101546117cd9190613a67565b9392505050565b806117de81613ae4565b915050611717565b60008060c960009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561183757600080fd5b505afa15801561184b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186f9190613684565b505050915050806402540be4006118869190613a67565b91505090565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600081815260cd602090815260409182902060040180548351818402810184019094528084526060939283018282801561191057602002820191906000526020600020905b8154815260200190600101908083116118fc575b50505050509050919050565b600081815260cd602090815260409182902060030180548351818402810184019094528084526060939283018282801561191057602002820191906000526020600020908154815260200190600101908083116118fc5750505050509050919050565b6119d2604051806101200160405280600015158152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160608152602001606081525090565b60ce54600090815260ca6020908152604091829020825161012081018452815460ff908116151582526001830154828501526002830154828601526003830154606083015260048301546080830152600583015416151560a0820152600682015460c08201526007820180548551818602810186019096528086529194929360e08601939290830182828015611a8757602002820191906000526020600020905b815481526020019060010190808311611a73575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015611adf57602002820191906000526020600020905b815481526020019060010190808311611acb575b505050505081525050905090565b60d48181548110611afd57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000611b238133612c21565b5060d580546001600160a01b0319166001600160a01b0392909216919091179055565b6000611b528133612c21565b5060d280546001600160a01b0319166001600160a01b0392909216919091179055565b60ce54600090815260ca602052604090205460ff16611be55733600090815260cc602052604090205460ff16611be55760405162461bcd60e51b815260206004820152601560248201527454686973207068617365206973207072697661746560581b6044820152606401610a97565b60026097541415611c085760405162461bcd60e51b8152600401610a97906138e1565b600260975560d5546001600160a01b0316611c2257600080fd5b60ce54600090815260ca6020526040812060020154611c5690670de0b6b3a764000090611c50908590612e71565b90612e7d565b60ce54600090815260ca60205260409020600301549091504210611c8c5760405162461bcd60e51b8152600401610a979061384e565b60ce54600090815260ca6020526040902060040154821115611cc05760405162461bcd60e51b8152600401610a9790613823565b60ce54600090815260ca6020526040902060010154821015611d1f5760405162461bcd60e51b815260206004820152601860248201527754686572652061726520746f6f2066657720746f6b656e7360401b6044820152606401610a97565b60d5546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064015b602060405180830381600087803b158015611d7257600080fd5b505af1158015611d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611daa9190613504565b611ded5760405162461bcd60e51b815260206004820152601460248201527311985a5b1959081d1c985b9cd9995c88109554d160621b6044820152606401610a97565b60cf8054906000611dfd83613ae4565b909155505060ce54600090815260ca602052604090206006015415611ef45760cf8054600090815260cd6020908152604080832080546001600160a01b03191633179055835483528083206001018690559254825282822060020185905560ce54825260ca8152908290206007018054835181840281018401909452808452611eb8939283018282801561133c5760200282019190600052602060002090815481526020019060010190808311611328575050505050612d72565b60ce54600090815260ca6020908152604080832060cf54845260cd90925290912060089091018054611eee926004019190613283565b50611f7a565b60d25460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015611f4057600080fd5b505af1158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f789190613504565b505b33600090815260cb6020908152604080832060cf5481546001810183559185528385209091015560ce54835260ca90915281206004018054849290611fc0908490613a86565b909155505060ce54600090815260ca60205260409020600401546120355760ce54600090815260ca6020908152604091829020600501805460ff1916600190811790915591519182527f0773b1bc4292ec2db340bde1f65478f936986eaca8deee2c306b42c31c27f4ad910160405180910390a15b8160d060008282546120479190613a86565b909155505060cf5460405133917f12cb4648cf3058b17ceeb33e579f8b0bc269fe0843f3900b8e24b6c54871703c9161208891868252602082015260400190565b60405180910390a250506001609755565b606060d48054806020026020016040519081016040528092919081815260200182805480156111a657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120d3575050505050905090565b6000828152606560205260409020600101546121168133612c21565b610c228383612d0b565b60ce54600090815260ca602052604090205460ff166121905733600090815260cc602052604090205460ff166121905760405162461bcd60e51b815260206004820152601560248201527454686973207068617365206973207072697661746560581b6044820152606401610a97565b600260975414156121b35760405162461bcd60e51b8152600401610a97906138e1565b6002609781905560ce54600090815260ca60205260408120909101546121e890670de0b6b3a764000090611c50908590612e71565b60ce54600090815260ca6020526040902060030154909150421061221e5760405162461bcd60e51b8152600401610a979061384e565b60ce54600090815260ca60205260409020600401548211156122525760405162461bcd60e51b8152600401610a9790613823565b60ce54600090815260ca60205260409020600101548210156122b15760405162461bcd60e51b815260206004820152601860248201527754686572652061726520746f6f2066657720746f6b656e7360401b6044820152606401610a97565b60d3546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401611d58565b60006122fa8133612c21565b6002609754141561231d5760405162461bcd60e51b8152600401610a97906138e1565b600260975560d35460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561237057600080fd5b505af1158015612384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a89190613504565b6123eb5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b210313ab9b2103a3930b739b332b960611b6044820152606401610a97565b604080516001600160a01b0385168152602081018490527f9f701d1b8adb1c115d61d876af764d676798c937e70ab565cf228e9672f355cb91015b60405180910390a15050600160975550565b60006124448133612c21565b600260975414156124675760405162461bcd60e51b8152600401610a97906138e1565b60026097556040516001600160a01b0384169083156108fc029084906000818181858888f193505050501580156124a2573d6000803e3d6000fd5b50604080516001600160a01b0385168152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649101612426565b60ce54600090815260ca60209081526040918290206007018054835181840281018401909452808452606093928301828280156111a65760200282019190600052602060002090815481526020019060010190808311611192575050505050905090565b6001600160a01b038116600090815260cb602090815260409182902080548351818402810184019094528084526060939283018282801561191057602002820191906000526020600020908154815260200190600101908083116118fc5750505050509050919050565b600080805b600084815260cd60205260409020600301548110156126d357600084815260cd6020526040812060038101805460059092019291849081106125f9576125f9613b15565b6000918252602080832090910154835282019290925260400190205460ff161580156126525750600084815260cd6020526040902060030180548290811061264357612643613b15565b90600052602060002001544210155b156126c157600084815260cd602052604090206004018054606491908390811061267e5761267e613b15565b906000526020600020015460cd6000878152602001908152602001600020600101546126aa9190613a67565b6126b49190613a45565b6126be9083613a2d565b91505b806126cb81613ae4565b9150506125b5565b506109bc81604051806040016040528060068152602001656375656e746160d01b815250612e89565b60006127088133612c21565b60ce54600090815260ca60205260409020600301544211156127445760ce54600090815260ca60205260409020600501805460ff191660011790555b61274e8383612ece565b6127ad5760405162461bcd60e51b815260206004820152602a60248201527f57726f6e672074696d65746f52656c65617365206f722070657263656e747320604482015269706172616d657465727360b01b6064820152608401610a97565b60ce54600090815260ca602052604090206005015460ff166128095760405162461bcd60e51b81526020600482015260156024820152742a3434b990383430b9b29034b9b713ba1037bb32b960591b6044820152606401610a97565b60ce54600090815260ca6020526040902060040154156128c85760d25460d15460ce54600090815260ca602052604090819020600490810154915163a9059cbb60e01b81526001600160a01b0393841691810191909152602481019190915291169063a9059cbb90604401602060405180830381600087803b15801561288e57600080fd5b505af11580156128a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c69190613504565b505b85421061292f5760405162461bcd60e51b815260206004820152602f60248201527f54686520656e64206f66207468652070686173652073686f756c64206265206760448201526e726561746572207468616e206e6f7760881b6064820152608401610a97565b8785116129925760405162461bcd60e51b815260206004820152602b60248201527f537570706c792073686f756c642062652067726561746572207468616e206d6960448201526a6e696d756d20656e74727960a81b6064820152608401610a97565b8460d05410156129e45760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f75676820737570706c7920746f206d696e74000000000000006044820152606401610a97565b60d25460d1546040516323b872dd60e01b81526001600160a01b039182166004820152306024820152604481018890529116906323b872dd90606401602060405180830381600087803b158015612a3a57600080fd5b505af1158015612a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a729190613504565b612ad65760405162461bcd60e51b815260206004820152602f60248201527f54686520746f6b656e20636f756c64206e6f74206265207472616e736665727260448201526e656420746f2074686520706861736560881b6064820152608401610a97565b60ce8054906000612ae683613ae4565b909155505060408051610120810182528a1515815260208082018b81528284018b8152606084018b8152608085018b8152600060a0870181815260c088018d815260e089018d81526101008a018d905260ce54845260ca8952999092208851815490151560ff1991821617825596516001820155945160028601559251600385015590516004840155905160058301805491151591909416179092559051600682015592518051929384939092612ba4926007850192910190613328565b506101008201518051612bc1916008840191602090910190613328565b5050604080518c15158152602081018c90529081018a905260608101899052608081018890527f2c7a4025fb199a8e49e83cadca2da4279693578a6b956b58f359c7c94b1ab082915060a00160405180910390a150505050505050505050565b612c2b828261188c565b610ccc57612c43816001600160a01b0316601461305c565b612c4e83602061305c565b604051602001612c5f92919061373b565b60408051601f198184030181529082905262461bcd60e51b8252610a9791600401613810565b612c8f828261188c565b610ccc5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612cc73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612d15828261188c565b15610ccc5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60005b8151811015610ccc5760cd600060cf548152602001908152602001600020600301828281518110612da857612da8613b15565b602002602001015142612dbb9190613a2d565b8154600181018355600092835260209092209091015580612ddb81613ae4565b915050612d75565b600054610100900460ff1680612dfc575060005460ff16155b612e185760405162461bcd60e51b8152600401610a9790613893565b600054610100900460ff16158015612e3a576000805461ffff19166101011790555b612e426131f8565b612e4a6131f8565b612e526131f8565b8015612e64576000805461ff00191690555b50565b610ccc8282612c85565b60006117cd8284613a67565b60006117cd8284613a45565b610ccc8282604051602401612e9f9291906139b7565b60408051601f198184030181529190526020810180516001600160e01b0316630fa3f34560e01b179052613262565b60008151835114612f125760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6174636820656e74727960901b6044820152606401610a97565b6000805b8451811015613001576000858281518110612f3357612f33613b15565b602002602001015111612f725760405162461bcd60e51b81526020600482015260076024820152664e6f2074696d6560c81b6044820152606401610a97565b6000848281518110612f8657612f86613b15565b602002602001015111612fc85760405162461bcd60e51b815260206004820152600a602482015269139bc81c195c98d95b9d60b21b6044820152606401610a97565b838181518110612fda57612fda613b15565b602002602001015182612fed9190613a2d565b915080612ff981613ae4565b915050612f16565b50806064146130525760405162461bcd60e51b815260206004820152601d60248201527f50657263656e746167657320646f206e6f742061646420746f203130300000006044820152606401610a97565b5060019392505050565b6060600061306b836002613a67565b613076906002613a2d565b67ffffffffffffffff81111561308e5761308e613b2b565b6040519080825280601f01601f1916602001820160405280156130b8576020820181803683370190505b509050600360fc1b816000815181106130d3576130d3613b15565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061310257613102613b15565b60200101906001600160f81b031916908160001a9053506000613126846002613a67565b613131906001613a2d565b90505b60018111156131a9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061316557613165613b15565b1a60f81b82828151811061317b5761317b613b15565b60200101906001600160f81b031916908160001a90535060049490941c936131a281613acd565b9050613134565b5083156117cd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a97565b600054610100900460ff1680613211575060005460ff16155b61322d5760405162461bcd60e51b8152600401610a9790613893565b600054610100900460ff16158015612e52576000805461ffff19166101011790558015612e64576000805461ff001916905550565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b8280548282559060005260206000209081019282156132c35760005260206000209182015b828111156132c35782548255916001019190600101906132a8565b506132cf929150613363565b5090565b8280548282559060005260206000209081019282156132c3579160200282015b828111156132c357825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906132f3565b8280548282559060005260206000209081019282156132c3579160200282015b828111156132c3578251825591602001919060010190613348565b5b808211156132cf5760008155600101613364565b80356001600160a01b038116811461338f57600080fd5b919050565b600082601f8301126133a557600080fd5b813560206133ba6133b583613a09565b6139d8565b80838252828201915082860187848660051b89010111156133da57600080fd5b60005b858110156133f9578135845292840192908401906001016133dd565b5090979650505050505050565b805169ffffffffffffffffffff8116811461338f57600080fd5b60006020828403121561343257600080fd5b6117cd82613378565b6000806040838503121561344e57600080fd5b61345783613378565b946020939093013593505050565b6000602080838503121561347857600080fd5b823567ffffffffffffffff81111561348f57600080fd5b8301601f810185136134a057600080fd5b80356134ae6133b582613a09565b80828252848201915084840188868560051b87010111156134ce57600080fd5b600094505b838510156134f8576134e481613378565b8352600194909401939185019185016134d3565b50979650505050505050565b60006020828403121561351657600080fd5b81516117cd81613b41565b600080600080600080600080610100898b03121561353e57600080fd5b883561354981613b41565b97506020890135965060408901359550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff8082111561358957600080fd5b6135958c838d01613394565b935060e08b01359150808211156135ab57600080fd5b506135b88b828c01613394565b9150509295985092959890939650565b6000602082840312156135da57600080fd5b5035919050565b600080604083850312156135f457600080fd5b8235915061360460208401613378565b90509250929050565b60006020828403121561361f57600080fd5b81356001600160e01b0319811681146117cd57600080fd5b6000806000806080858703121561364d57600080fd5b8435935061365d60208601613378565b925061366b60408601613378565b915061367960608601613378565b905092959194509250565b600080600080600060a0868803121561369c57600080fd5b6136a586613406565b94506020860151935060408601519250606086015191506136c860808701613406565b90509295509295909350565b600081518084526020808501945080840160005b83811015613704578151875295820195908201906001016136e8565b509495945050505050565b60008151808452613727816020860160208601613a9d565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613773816017850160208801613a9d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516137a4816028840160208801613a9d565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b818110156137f15783516001600160a01b0316835292840192918401916001016137cc565b50909695505050505050565b6020815260006117cd60208301846136d4565b6020815260006117cd602083018461370f565b6020808252601190820152704e6f7420656e6f75676820737570706c7960781b604082015260600190565b60208082526025908201527f54686973207068617365206973206f7665722c207761697420666f7220746865604082015264081b995e1d60da1b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020815261392b60208201835115159052565b602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a083015161396860c084018215159052565b5060c083015160e083015260e083015161012061010081818601526139916101408601846136d4565b90860151858203601f1901838701529092506139ad83826136d4565b9695505050505050565b8281526040602082015260006139d0604083018461370f565b949350505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613a0157613a01613b2b565b604052919050565b600067ffffffffffffffff821115613a2357613a23613b2b565b5060051b60200190565b60008219821115613a4057613a40613aff565b500190565b600082613a6257634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613a8157613a81613aff565b500290565b600082821015613a9857613a98613aff565b500390565b60005b83811015613ab8578181015183820152602001613aa0565b83811115613ac7576000848401525b50505050565b600081613adc57613adc613aff565b506000190190565b6000600019821415613af857613af8613aff565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114612e6457600080fdfea2646970667358221220c56669db40d78da1d69379c306b44e23071715b73bd2ed3ca9702379a3d3ffc064736f6c63430008070033",
    "deployedBytecode": "0x6080604052600436106102975760003560e01c8063916385f81161015a578063cb7e9057116100c1578063f3fef3a31161007a578063f3fef3a3146108c6578063f795077b146108e6578063f8185702146108fb578063f8ad78941461091b578063fadcb54c1461093b578063fd7ddc6f1461095b57600080fd5b8063cb7e905714610804578063cc58cede14610824578063d01f63f514610844578063d547741f14610866578063ee356ec014610886578063f2241738146108a657600080fd5b8063af640d0f11610113578063af640d0f1461074c578063b68f027714610762578063bb543f5f14610782578063be38341d146107a4578063c930d143146107c4578063c9cda91f146107e457600080fd5b8063916385f81461069157806391d14854146106c15780639ba81a3c146106e15780639d76ea58146107015780639def891014610721578063a217fddf1461073757600080fd5b80633d2d1900116101fe5780637e2be3a3116101b75780637e2be3a3146105915780637f649783146105b15780637f811d4f146105d157806382bfefc81461063c5780638a44b0441461065c5780638e15f4731461067c57600080fd5b80633d2d1900146104b057806345737b1e146104d257806362d0dd0e146104f2578063699de16214610519578063754d1d54146105395780637a67bbfd1461055957600080fd5b8063248a9ca311610250578063248a9ca3146103735780632e37eef6146103a35780632f2ff15d1461043b57806334279b681461045b57806336568abe1461047057806337bdc99b1461049057600080fd5b806301ffc9a7146102a3578063044b3704146102d8578063055ad42e146103065780630a33c90a1461031c5780630f25941a1461033e578063229f024f1461035357600080fd5b3661029e57005b600080fd5b3480156102af57600080fd5b506102c36102be36600461360d565b61098b565b60405190151581526020015b60405180910390f35b3480156102e457600080fd5b506102f86102f336600461343b565b6109c2565b6040519081526020016102cf565b34801561031257600080fd5b506102f860ce5481565b34801561032857600080fd5b5061033c610337366004613420565b6109f3565b005b34801561034a57600080fd5b5061033c610a56565b34801561035f57600080fd5b5061033c61036e366004613420565b610bcd565b34801561037f57600080fd5b506102f861038e3660046135c8565b60009081526065602052604090206001015490565b3480156103af57600080fd5b506104026103be3660046135c8565b60ca60205260009081526040902080546001820154600283015460038401546004850154600586015460069096015460ff9586169694959394929391929091169087565b60408051971515885260208801969096529486019390935260608501919091526080840152151560a083015260c082015260e0016102cf565b34801561044757600080fd5b5061033c6104563660046135e1565b610bfc565b34801561046757600080fd5b5061033c610c27565b34801561047c57600080fd5b5061033c61048b3660046135e1565b610cd0565b34801561049c57600080fd5b506102c36104ab3660046135c8565b610d4a565b3480156104bc57600080fd5b506104c561114a565b6040516102cf91906137fd565b3480156104de57600080fd5b5061033c6104ed3660046135c8565b6111b0565b3480156104fe57600080fd5b5060ce54600090815260ca60205260409020600401546102f8565b34801561052557600080fd5b5061033c6105343660046135e1565b6111e0565b34801561054557600080fd5b5061033c610554366004613637565b6114d2565b34801561056557600080fd5b5060d354610579906001600160a01b031681565b6040516001600160a01b0390911681526020016102cf565b34801561059d57600080fd5b506102f86105ac3660046135c8565b6115cf565b3480156105bd57600080fd5b5061033c6105cc366004613465565b61168b565b3480156105dd57600080fd5b506106176105ec3660046135c8565b60cd602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b0390941684526020840192909252908201526060016102cf565b34801561064857600080fd5b5060d554610579906001600160a01b031681565b34801561066857600080fd5b506102f86106773660046135c8565b611713565b34801561068857600080fd5b506102f86117e6565b34801561069d57600080fd5b506102f86106ac3660046135c8565b600090815260cd602052604090206002015490565b3480156106cd57600080fd5b506102c36106dc3660046135e1565b61188c565b3480156106ed57600080fd5b506104c56106fc3660046135c8565b6118b7565b34801561070d57600080fd5b5060d254610579906001600160a01b031681565b34801561072d57600080fd5b506102f860d05481565b34801561074357600080fd5b506102f8600081565b34801561075857600080fd5b506102f860cf5481565b34801561076e57600080fd5b506104c561077d3660046135c8565b61191c565b34801561078e57600080fd5b5061079761197f565b6040516102cf9190613918565b3480156107b057600080fd5b506105796107bf3660046135c8565b611aed565b3480156107d057600080fd5b5061033c6107df366004613420565b611b17565b3480156107f057600080fd5b5061033c6107ff366004613420565b611b46565b34801561081057600080fd5b5060d154610579906001600160a01b031681565b34801561083057600080fd5b5061033c61083f3660046135c8565b611b75565b34801561085057600080fd5b50610859612099565b6040516102cf91906137b0565b34801561087257600080fd5b5061033c6108813660046135e1565b6120fa565b34801561089257600080fd5b5061033c6108a13660046135c8565b612120565b3480156108b257600080fd5b5061033c6108c136600461343b565b6122ee565b3480156108d257600080fd5b5061033c6108e136600461343b565b612438565b3480156108f257600080fd5b506104c56124e2565b34801561090757600080fd5b506104c5610916366004613420565b612546565b34801561092757600080fd5b506102f86109363660046135c8565b6125b0565b34801561094757600080fd5b5061033c610956366004613521565b6126fc565b34801561096757600080fd5b506102f86109763660046135c8565b600090815260cd602052604090206001015490565b60006001600160e01b03198216637965db0b60e01b14806109bc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60cb60205281600052604060002081815481106109de57600080fd5b90600052602060002001600091509150505481565b60006109ff8133612c21565b6040516001600160a01b038316907f92b885c3da6a6d52c13130f8dcaa55efff1188d78078bd0aac02fc01ed493faf90600090a25060d180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610a628133612c21565b60ce54600090815260ca602052604090206005015460ff1615610aa05760405162461bcd60e51b8152600401610a979061384e565b60405180910390fd5b60ce54600090815260ca602052604090206004015415610b745760d25460d15460ce54600090815260ca602052604090819020600490810154915163a9059cbb60e01b81526001600160a01b0393841691810191909152602481019190915291169063a9059cbb90604401602060405180830381600087803b158015610b2557600080fd5b505af1158015610b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5d9190613504565b5060ce54600090815260ca60205260408120600401555b60ce54600090815260ca6020908152604091829020600501805460ff1916600190811790915591519182527f0773b1bc4292ec2db340bde1f65478f936986eaca8deee2c306b42c31c27f4ad910160405180910390a150565b6000610bd98133612c21565b5060d380546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260656020526040902060010154610c188133612c21565b610c228383612c85565b505050565b6000610c338133612c21565b60005b60d454811015610ccc57600060cc600060d48481548110610c5957610c59613b15565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905560d4805482908110610ca157610ca1613b15565b600091825260209091200180546001600160a01b031916905580610cc481613ae4565b915050610c36565b5050565b6001600160a01b0381163314610d405760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a97565b610ccc8282612d0b565b600081815260cd602052604081205481906001600160a01b03163314610da85760405162461bcd60e51b8152602060048201526013602482015272151a1a5cc81a5cc81b9bdd081e5bdd5c881a59606a1b6044820152606401610a97565b600083815260cd6020526040902060020154610dfd5760405162461bcd60e51b8152602060048201526014602482015273416c726561647920636c61696d20746f6b656e7360601b6044820152606401610a97565b60005b600084815260cd602052604090206003015481101561109357600084815260cd60205260409020600301805482908110610e3c57610e3c613b15565b90600052602060002001544210158015610e9d5750600084815260cd602052604081206003810180546005909201929184908110610e7c57610e7c613b15565b6000918252602080832090910154835282019290925260400190205460ff16155b156110815760d254600085815260cd602052604090208054600490910180546001600160a01b039384169363a9059cbb93169160649186908110610ee357610ee3613b15565b906000526020600020015460cd60008a815260200190815260200160002060010154610f0f9190613a67565b610f199190613a45565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610f5f57600080fd5b505af1158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f979190613504565b50600084815260cd60205260408120600381018054600193600590930192919085908110610fc757610fc7613b15565b9060005260206000200154815260200190815260200160002060006101000a81548160ff021916908315150217905550606460cd6000868152602001908152602001600020600401828154811061102057611020613b15565b906000526020600020015460cd60008781526020019081526020016000206001015461104c9190613a67565b6110569190613a45565b600085815260cd602052604081206002018054909190611077908490613a86565b9091555060019250505b8061108b81613ae4565b915050610e00565b50806110ed5760405162461bcd60e51b815260206004820152602360248201527f43757272656e742074696d65206973206265666f72652072656c656173652074604482015262696d6560e81b6064820152608401610a97565b600083815260cd60209081526040918290205460cf5483516001600160a01b039092168252918101919091527fc88fae5b8386808973dd739aabbcdc7b9a247773ca88a1338c13730eadcf198a910160405180910390a192915050565b60ce54600090815260ca60209081526040918290206008018054835181840281018401909452808452606093928301828280156111a657602002820191906000526020600020905b815481526020019060010190808311611192575b5050505050905090565b60006111bc8133612c21565b8142106111c857600080fd5b5060ce54600090815260ca6020526040902060030155565b60006111ec8133612c21565b60ce54600090815260ca6020526040902060030154421061121f5760405162461bcd60e51b8152600401610a979061384e565b60ce54600090815260ca60205260409020600401548311156112535760405162461bcd60e51b8152600401610a9790613823565b60ce54600090815260ca6020526040902060060154156113825760cf805490600061127d83613ae4565b90915550506001600160a01b038216600081815260cb6020908152604080832060cf805482546001818101855593875285872001558054855260cd845282852080546001600160a01b03191690961790955584548452818420018790559254825282822060020186905560ce54825260ca8152908290206007018054835181840281018401909452808452611346939283018282801561133c57602002820191906000526020600020905b815481526020019060010190808311611328575b5050505050612d72565b60ce54600090815260ca6020908152604080832060cf54845260cd9092529091206008909101805461137c926004019190613283565b5061140a565b60d25460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018690529091169063a9059cbb90604401602060405180830381600087803b1580156113d057600080fd5b505af11580156113e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114089190613504565b505b60ce54600090815260ca60205260408120600401805485929061142e908490613a86565b909155505060ce54600090815260ca602052604090206004015461146c5760ce54600090815260ca60205260409020600501805460ff191660011790555b8260d0600082825461147e9190613a86565b909155505060ce5460408051918252602082018590526001600160a01b03841682820152517fc45df7e0c5982c4770fdd0c17294d4104d8fce3389909de62cfd119a25e428f29181900360600190a1505050565b600054610100900460ff16806114eb575060005460ff16155b6115075760405162461bcd60e51b8152600401610a9790613893565b600054610100900460ff16158015611529576000805461ffff19166101011790555b611531612de3565b61153c600033612e67565b600060ce81905560d086905560d180546001600160a01b038088166001600160a01b03199283161790925560d2805487841690831617905591805260ca6020527f992e0e3e7050db88ec37ec33505f46a9813ea5551fe17ef58dc201344bcbaf98805460ff1916600117905560d380549185169190921617905580156115c8576000805461ff00191690555b5050505050565b6000805b600083815260cd602052604090206003015481101561168257600083815260cd60205260408120600381018054600590920192918490811061161757611617613b15565b6000918252602080832090910154835282019290925260400190205460ff1661167057600083815260cd6020526040902060030180548290811061165d5761165d613b15565b9060005260206000200154915050919050565b8061167a81613ae4565b9150506115d3565b50600092915050565b60006116978133612c21565b60005b82518110156116ff57600160cc60008584815181106116bb576116bb613b15565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806116f781613ae4565b91505061169a565b508151610c229060d49060208501906132d3565b6000805b600083815260cd602052604090206003015481101561168257600083815260cd60205260408120600381018054600590920192918490811061175b5761175b613b15565b6000918252602080832090910154835282019290925260400190205460ff166117d457600083815260cd602052604090206004018054829081106117a1576117a1613b15565b906000526020600020015460cd6000858152602001908152602001600020600101546117cd9190613a67565b9392505050565b806117de81613ae4565b915050611717565b60008060c960009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561183757600080fd5b505afa15801561184b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186f9190613684565b505050915050806402540be4006118869190613a67565b91505090565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600081815260cd602090815260409182902060040180548351818402810184019094528084526060939283018282801561191057602002820191906000526020600020905b8154815260200190600101908083116118fc575b50505050509050919050565b600081815260cd602090815260409182902060030180548351818402810184019094528084526060939283018282801561191057602002820191906000526020600020908154815260200190600101908083116118fc5750505050509050919050565b6119d2604051806101200160405280600015158152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160608152602001606081525090565b60ce54600090815260ca6020908152604091829020825161012081018452815460ff908116151582526001830154828501526002830154828601526003830154606083015260048301546080830152600583015416151560a0820152600682015460c08201526007820180548551818602810186019096528086529194929360e08601939290830182828015611a8757602002820191906000526020600020905b815481526020019060010190808311611a73575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015611adf57602002820191906000526020600020905b815481526020019060010190808311611acb575b505050505081525050905090565b60d48181548110611afd57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000611b238133612c21565b5060d580546001600160a01b0319166001600160a01b0392909216919091179055565b6000611b528133612c21565b5060d280546001600160a01b0319166001600160a01b0392909216919091179055565b60ce54600090815260ca602052604090205460ff16611be55733600090815260cc602052604090205460ff16611be55760405162461bcd60e51b815260206004820152601560248201527454686973207068617365206973207072697661746560581b6044820152606401610a97565b60026097541415611c085760405162461bcd60e51b8152600401610a97906138e1565b600260975560d5546001600160a01b0316611c2257600080fd5b60ce54600090815260ca6020526040812060020154611c5690670de0b6b3a764000090611c50908590612e71565b90612e7d565b60ce54600090815260ca60205260409020600301549091504210611c8c5760405162461bcd60e51b8152600401610a979061384e565b60ce54600090815260ca6020526040902060040154821115611cc05760405162461bcd60e51b8152600401610a9790613823565b60ce54600090815260ca6020526040902060010154821015611d1f5760405162461bcd60e51b815260206004820152601860248201527754686572652061726520746f6f2066657720746f6b656e7360401b6044820152606401610a97565b60d5546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064015b602060405180830381600087803b158015611d7257600080fd5b505af1158015611d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611daa9190613504565b611ded5760405162461bcd60e51b815260206004820152601460248201527311985a5b1959081d1c985b9cd9995c88109554d160621b6044820152606401610a97565b60cf8054906000611dfd83613ae4565b909155505060ce54600090815260ca602052604090206006015415611ef45760cf8054600090815260cd6020908152604080832080546001600160a01b03191633179055835483528083206001018690559254825282822060020185905560ce54825260ca8152908290206007018054835181840281018401909452808452611eb8939283018282801561133c5760200282019190600052602060002090815481526020019060010190808311611328575050505050612d72565b60ce54600090815260ca6020908152604080832060cf54845260cd90925290912060089091018054611eee926004019190613283565b50611f7a565b60d25460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015611f4057600080fd5b505af1158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f789190613504565b505b33600090815260cb6020908152604080832060cf5481546001810183559185528385209091015560ce54835260ca90915281206004018054849290611fc0908490613a86565b909155505060ce54600090815260ca60205260409020600401546120355760ce54600090815260ca6020908152604091829020600501805460ff1916600190811790915591519182527f0773b1bc4292ec2db340bde1f65478f936986eaca8deee2c306b42c31c27f4ad910160405180910390a15b8160d060008282546120479190613a86565b909155505060cf5460405133917f12cb4648cf3058b17ceeb33e579f8b0bc269fe0843f3900b8e24b6c54871703c9161208891868252602082015260400190565b60405180910390a250506001609755565b606060d48054806020026020016040519081016040528092919081815260200182805480156111a657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120d3575050505050905090565b6000828152606560205260409020600101546121168133612c21565b610c228383612d0b565b60ce54600090815260ca602052604090205460ff166121905733600090815260cc602052604090205460ff166121905760405162461bcd60e51b815260206004820152601560248201527454686973207068617365206973207072697661746560581b6044820152606401610a97565b600260975414156121b35760405162461bcd60e51b8152600401610a97906138e1565b6002609781905560ce54600090815260ca60205260408120909101546121e890670de0b6b3a764000090611c50908590612e71565b60ce54600090815260ca6020526040902060030154909150421061221e5760405162461bcd60e51b8152600401610a979061384e565b60ce54600090815260ca60205260409020600401548211156122525760405162461bcd60e51b8152600401610a9790613823565b60ce54600090815260ca60205260409020600101548210156122b15760405162461bcd60e51b815260206004820152601860248201527754686572652061726520746f6f2066657720746f6b656e7360401b6044820152606401610a97565b60d3546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401611d58565b60006122fa8133612c21565b6002609754141561231d5760405162461bcd60e51b8152600401610a97906138e1565b600260975560d35460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561237057600080fd5b505af1158015612384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a89190613504565b6123eb5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b210313ab9b2103a3930b739b332b960611b6044820152606401610a97565b604080516001600160a01b0385168152602081018490527f9f701d1b8adb1c115d61d876af764d676798c937e70ab565cf228e9672f355cb91015b60405180910390a15050600160975550565b60006124448133612c21565b600260975414156124675760405162461bcd60e51b8152600401610a97906138e1565b60026097556040516001600160a01b0384169083156108fc029084906000818181858888f193505050501580156124a2573d6000803e3d6000fd5b50604080516001600160a01b0385168152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649101612426565b60ce54600090815260ca60209081526040918290206007018054835181840281018401909452808452606093928301828280156111a65760200282019190600052602060002090815481526020019060010190808311611192575050505050905090565b6001600160a01b038116600090815260cb602090815260409182902080548351818402810184019094528084526060939283018282801561191057602002820191906000526020600020908154815260200190600101908083116118fc5750505050509050919050565b600080805b600084815260cd60205260409020600301548110156126d357600084815260cd6020526040812060038101805460059092019291849081106125f9576125f9613b15565b6000918252602080832090910154835282019290925260400190205460ff161580156126525750600084815260cd6020526040902060030180548290811061264357612643613b15565b90600052602060002001544210155b156126c157600084815260cd602052604090206004018054606491908390811061267e5761267e613b15565b906000526020600020015460cd6000878152602001908152602001600020600101546126aa9190613a67565b6126b49190613a45565b6126be9083613a2d565b91505b806126cb81613ae4565b9150506125b5565b506109bc81604051806040016040528060068152602001656375656e746160d01b815250612e89565b60006127088133612c21565b60ce54600090815260ca60205260409020600301544211156127445760ce54600090815260ca60205260409020600501805460ff191660011790555b61274e8383612ece565b6127ad5760405162461bcd60e51b815260206004820152602a60248201527f57726f6e672074696d65746f52656c65617365206f722070657263656e747320604482015269706172616d657465727360b01b6064820152608401610a97565b60ce54600090815260ca602052604090206005015460ff166128095760405162461bcd60e51b81526020600482015260156024820152742a3434b990383430b9b29034b9b713ba1037bb32b960591b6044820152606401610a97565b60ce54600090815260ca6020526040902060040154156128c85760d25460d15460ce54600090815260ca602052604090819020600490810154915163a9059cbb60e01b81526001600160a01b0393841691810191909152602481019190915291169063a9059cbb90604401602060405180830381600087803b15801561288e57600080fd5b505af11580156128a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c69190613504565b505b85421061292f5760405162461bcd60e51b815260206004820152602f60248201527f54686520656e64206f66207468652070686173652073686f756c64206265206760448201526e726561746572207468616e206e6f7760881b6064820152608401610a97565b8785116129925760405162461bcd60e51b815260206004820152602b60248201527f537570706c792073686f756c642062652067726561746572207468616e206d6960448201526a6e696d756d20656e74727960a81b6064820152608401610a97565b8460d05410156129e45760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f75676820737570706c7920746f206d696e74000000000000006044820152606401610a97565b60d25460d1546040516323b872dd60e01b81526001600160a01b039182166004820152306024820152604481018890529116906323b872dd90606401602060405180830381600087803b158015612a3a57600080fd5b505af1158015612a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a729190613504565b612ad65760405162461bcd60e51b815260206004820152602f60248201527f54686520746f6b656e20636f756c64206e6f74206265207472616e736665727260448201526e656420746f2074686520706861736560881b6064820152608401610a97565b60ce8054906000612ae683613ae4565b909155505060408051610120810182528a1515815260208082018b81528284018b8152606084018b8152608085018b8152600060a0870181815260c088018d815260e089018d81526101008a018d905260ce54845260ca8952999092208851815490151560ff1991821617825596516001820155945160028601559251600385015590516004840155905160058301805491151591909416179092559051600682015592518051929384939092612ba4926007850192910190613328565b506101008201518051612bc1916008840191602090910190613328565b5050604080518c15158152602081018c90529081018a905260608101899052608081018890527f2c7a4025fb199a8e49e83cadca2da4279693578a6b956b58f359c7c94b1ab082915060a00160405180910390a150505050505050505050565b612c2b828261188c565b610ccc57612c43816001600160a01b0316601461305c565b612c4e83602061305c565b604051602001612c5f92919061373b565b60408051601f198184030181529082905262461bcd60e51b8252610a9791600401613810565b612c8f828261188c565b610ccc5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612cc73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612d15828261188c565b15610ccc5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60005b8151811015610ccc5760cd600060cf548152602001908152602001600020600301828281518110612da857612da8613b15565b602002602001015142612dbb9190613a2d565b8154600181018355600092835260209092209091015580612ddb81613ae4565b915050612d75565b600054610100900460ff1680612dfc575060005460ff16155b612e185760405162461bcd60e51b8152600401610a9790613893565b600054610100900460ff16158015612e3a576000805461ffff19166101011790555b612e426131f8565b612e4a6131f8565b612e526131f8565b8015612e64576000805461ff00191690555b50565b610ccc8282612c85565b60006117cd8284613a67565b60006117cd8284613a45565b610ccc8282604051602401612e9f9291906139b7565b60408051601f198184030181529190526020810180516001600160e01b0316630fa3f34560e01b179052613262565b60008151835114612f125760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6174636820656e74727960901b6044820152606401610a97565b6000805b8451811015613001576000858281518110612f3357612f33613b15565b602002602001015111612f725760405162461bcd60e51b81526020600482015260076024820152664e6f2074696d6560c81b6044820152606401610a97565b6000848281518110612f8657612f86613b15565b602002602001015111612fc85760405162461bcd60e51b815260206004820152600a602482015269139bc81c195c98d95b9d60b21b6044820152606401610a97565b838181518110612fda57612fda613b15565b602002602001015182612fed9190613a2d565b915080612ff981613ae4565b915050612f16565b50806064146130525760405162461bcd60e51b815260206004820152601d60248201527f50657263656e746167657320646f206e6f742061646420746f203130300000006044820152606401610a97565b5060019392505050565b6060600061306b836002613a67565b613076906002613a2d565b67ffffffffffffffff81111561308e5761308e613b2b565b6040519080825280601f01601f1916602001820160405280156130b8576020820181803683370190505b509050600360fc1b816000815181106130d3576130d3613b15565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061310257613102613b15565b60200101906001600160f81b031916908160001a9053506000613126846002613a67565b613131906001613a2d565b90505b60018111156131a9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061316557613165613b15565b1a60f81b82828151811061317b5761317b613b15565b60200101906001600160f81b031916908160001a90535060049490941c936131a281613acd565b9050613134565b5083156117cd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a97565b600054610100900460ff1680613211575060005460ff16155b61322d5760405162461bcd60e51b8152600401610a9790613893565b600054610100900460ff16158015612e52576000805461ffff19166101011790558015612e64576000805461ff001916905550565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b8280548282559060005260206000209081019282156132c35760005260206000209182015b828111156132c35782548255916001019190600101906132a8565b506132cf929150613363565b5090565b8280548282559060005260206000209081019282156132c3579160200282015b828111156132c357825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906132f3565b8280548282559060005260206000209081019282156132c3579160200282015b828111156132c3578251825591602001919060010190613348565b5b808211156132cf5760008155600101613364565b80356001600160a01b038116811461338f57600080fd5b919050565b600082601f8301126133a557600080fd5b813560206133ba6133b583613a09565b6139d8565b80838252828201915082860187848660051b89010111156133da57600080fd5b60005b858110156133f9578135845292840192908401906001016133dd565b5090979650505050505050565b805169ffffffffffffffffffff8116811461338f57600080fd5b60006020828403121561343257600080fd5b6117cd82613378565b6000806040838503121561344e57600080fd5b61345783613378565b946020939093013593505050565b6000602080838503121561347857600080fd5b823567ffffffffffffffff81111561348f57600080fd5b8301601f810185136134a057600080fd5b80356134ae6133b582613a09565b80828252848201915084840188868560051b87010111156134ce57600080fd5b600094505b838510156134f8576134e481613378565b8352600194909401939185019185016134d3565b50979650505050505050565b60006020828403121561351657600080fd5b81516117cd81613b41565b600080600080600080600080610100898b03121561353e57600080fd5b883561354981613b41565b97506020890135965060408901359550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff8082111561358957600080fd5b6135958c838d01613394565b935060e08b01359150808211156135ab57600080fd5b506135b88b828c01613394565b9150509295985092959890939650565b6000602082840312156135da57600080fd5b5035919050565b600080604083850312156135f457600080fd5b8235915061360460208401613378565b90509250929050565b60006020828403121561361f57600080fd5b81356001600160e01b0319811681146117cd57600080fd5b6000806000806080858703121561364d57600080fd5b8435935061365d60208601613378565b925061366b60408601613378565b915061367960608601613378565b905092959194509250565b600080600080600060a0868803121561369c57600080fd5b6136a586613406565b94506020860151935060408601519250606086015191506136c860808701613406565b90509295509295909350565b600081518084526020808501945080840160005b83811015613704578151875295820195908201906001016136e8565b509495945050505050565b60008151808452613727816020860160208601613a9d565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613773816017850160208801613a9d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516137a4816028840160208801613a9d565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b818110156137f15783516001600160a01b0316835292840192918401916001016137cc565b50909695505050505050565b6020815260006117cd60208301846136d4565b6020815260006117cd602083018461370f565b6020808252601190820152704e6f7420656e6f75676820737570706c7960781b604082015260600190565b60208082526025908201527f54686973207068617365206973206f7665722c207761697420666f7220746865604082015264081b995e1d60da1b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020815261392b60208201835115159052565b602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a083015161396860c084018215159052565b5060c083015160e083015260e083015161012061010081818601526139916101408601846136d4565b90860151858203601f1901838701529092506139ad83826136d4565b9695505050505050565b8281526040602082015260006139d0604083018461370f565b949350505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613a0157613a01613b2b565b604052919050565b600067ffffffffffffffff821115613a2357613a23613b2b565b5060051b60200190565b60008219821115613a4057613a40613aff565b500190565b600082613a6257634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613a8157613a81613aff565b500290565b600082821015613a9857613a98613aff565b500390565b60005b83811015613ab8578181015183820152602001613aa0565b83811115613ac7576000848401525b50505050565b600081613adc57613adc613aff565b506000190190565b6000600019821415613af857613af8613aff565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114612e6457600080fdfea2646970667358221220c56669db40d78da1d69379c306b44e23071715b73bd2ed3ca9702379a3d3ffc064736f6c63430008070033",
    "devdoc": {
      "author": "crisolita",
      "kind": "dev",
      "methods": {
        "changeEndDate(uint256)": {
          "details": "change the end date's phase"
        },
        "changeTokenAddress(address)": {
          "details": "change the token address"
        },
        "getIDs(address)": {
          "details": "see the tokens lock and id for every user"
        },
        "getLatestPrice()": {
          "details": "get the usd/BNB price"
        },
        "getRoleAdmin(bytes32)": {
          "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
        },
        "grantRole(bytes32,address)": {
          "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
        },
        "hasRole(bytes32,address)": {
          "details": "Returns `true` if `account` has been granted `role`."
        },
        "renounceRole(bytes32,address)": {
          "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
        },
        "revokeRole(bytes32,address)": {
          "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
        },
        "showMyToClaimAllAmount(uint256)": {
          "details": "mostrar lo que tiene disponible para claimear"
        },
        "showMyinitAmount(uint256)": {
          "details": "time in lock"
        },
        "supportsInterface(bytes4)": {
          "details": "See {IERC165-supportsInterface}."
        }
      },
      "title": "Sale",
      "version": 1
    },
    "userdoc": {
      "events": {
        "PhaseCreated(bool,uint256,uint256,uint256,uint256)": {
          "notice": "records creation  of phases"
        },
        "Purchase(address,uint256,uint256)": {
          "notice": "records the token transfers made by the contract"
        }
      },
      "kind": "user",
      "methods": {
        "BUSDaddress()": {
          "notice": "address of busd"
        },
        "TOKEN()": {
          "notice": "buy tokens with BUSD"
        },
        "addUsersToVesting(uint256,address)": {
          "notice": "add a list of wallet to vesting"
        },
        "allIDSforUser(address,uint256)": {
          "notice": "record the ids for users"
        },
        "buyTokenWithBUSD(uint256)": {
          "notice": "buy tokens with BUSD"
        },
        "changeBUSDAddress(address)": {
          "notice": "change the Busd address"
        },
        "changeDispatcher(address)": {
          "notice": "change account to transfer the contract balance"
        },
        "createPhase(bool,uint256,uint256,uint256,uint256,uint256,uint256[],uint256[])": {
          "notice": "add a phase to mapping"
        },
        "currentPhase()": {
          "notice": "reference for the mapping of phases, uint of the current phase"
        },
        "dispatcher()": {
          "notice": "wallet to transfer funds of the contract"
        },
        "getcurrentPhase()": {
          "notice": "get ongoing phase or the last phase over"
        },
        "phases(uint256)": {
          "notice": "all phases (next, current and previous)"
        },
        "tokenAddress()": {
          "notice": "address the token that user buys"
        },
        "tokensRemainForSale()": {
          "notice": "reference for the mapping of phases, uint of the total phasecurrent amount of tokens"
        },
        "whitelistArr(uint256)": {
          "notice": "records the changes of the wallet where the tokens are transferred"
        },
        "withdraw(address,uint256)": {
          "notice": "withdraw eth"
        },
        "withdrawBUSD(address,uint256)": {
          "notice": "withdraw busd"
        }
      },
      "notice": "this contract allow create phases for mint token and transfer the funds",
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 459,
          "contract": "contracts/Sale.sol:Sale",
          "label": "_initialized",
          "offset": 0,
          "slot": "0",
          "type": "t_bool"
        },
        {
          "astId": 462,
          "contract": "contracts/Sale.sol:Sale",
          "label": "_initializing",
          "offset": 1,
          "slot": "0",
          "type": "t_bool"
        },
        {
          "astId": 600,
          "contract": "contracts/Sale.sol:Sale",
          "label": "__gap",
          "offset": 0,
          "slot": "1",
          "type": "t_array(t_uint256)50_storage"
        },
        {
          "astId": 849,
          "contract": "contracts/Sale.sol:Sale",
          "label": "__gap",
          "offset": 0,
          "slot": "51",
          "type": "t_array(t_uint256)50_storage"
        },
        {
          "astId": 94,
          "contract": "contracts/Sale.sol:Sale",
          "label": "_roles",
          "offset": 0,
          "slot": "101",
          "type": "t_mapping(t_bytes32,t_struct(RoleData)89_storage)"
        },
        {
          "astId": 379,
          "contract": "contracts/Sale.sol:Sale",
          "label": "__gap",
          "offset": 0,
          "slot": "102",
          "type": "t_array(t_uint256)49_storage"
        },
        {
          "astId": 513,
          "contract": "contracts/Sale.sol:Sale",
          "label": "_status",
          "offset": 0,
          "slot": "151",
          "type": "t_uint256"
        },
        {
          "astId": 556,
          "contract": "contracts/Sale.sol:Sale",
          "label": "__gap",
          "offset": 0,
          "slot": "152",
          "type": "t_array(t_uint256)49_storage"
        },
        {
          "astId": 3877,
          "contract": "contracts/Sale.sol:Sale",
          "label": "priceFeed",
          "offset": 0,
          "slot": "201",
          "type": "t_contract(AggregatorV3Interface)45"
        },
        {
          "astId": 3921,
          "contract": "contracts/Sale.sol:Sale",
          "label": "phases",
          "offset": 0,
          "slot": "202",
          "type": "t_mapping(t_uint256,t_struct(Phase)3898_storage)"
        },
        {
          "astId": 3927,
          "contract": "contracts/Sale.sol:Sale",
          "label": "allIDSforUser",
          "offset": 0,
          "slot": "203",
          "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
        },
        {
          "astId": 3931,
          "contract": "contracts/Sale.sol:Sale",
          "label": "whitelist",
          "offset": 0,
          "slot": "204",
          "type": "t_mapping(t_address,t_bool)"
        },
        {
          "astId": 3936,
          "contract": "contracts/Sale.sol:Sale",
          "label": "tokenLocksForSale",
          "offset": 0,
          "slot": "205",
          "type": "t_mapping(t_uint256,t_struct(TokenTimelock)3915_storage)"
        },
        {
          "astId": 3939,
          "contract": "contracts/Sale.sol:Sale",
          "label": "currentPhase",
          "offset": 0,
          "slot": "206",
          "type": "t_uint256"
        },
        {
          "astId": 3941,
          "contract": "contracts/Sale.sol:Sale",
          "label": "id",
          "offset": 0,
          "slot": "207",
          "type": "t_uint256"
        },
        {
          "astId": 3944,
          "contract": "contracts/Sale.sol:Sale",
          "label": "tokensRemainForSale",
          "offset": 0,
          "slot": "208",
          "type": "t_uint256"
        },
        {
          "astId": 3947,
          "contract": "contracts/Sale.sol:Sale",
          "label": "dispatcher",
          "offset": 0,
          "slot": "209",
          "type": "t_address"
        },
        {
          "astId": 3950,
          "contract": "contracts/Sale.sol:Sale",
          "label": "tokenAddress",
          "offset": 0,
          "slot": "210",
          "type": "t_address"
        },
        {
          "astId": 3953,
          "contract": "contracts/Sale.sol:Sale",
          "label": "BUSDaddress",
          "offset": 0,
          "slot": "211",
          "type": "t_address"
        },
        {
          "astId": 3957,
          "contract": "contracts/Sale.sol:Sale",
          "label": "whitelistArr",
          "offset": 0,
          "slot": "212",
          "type": "t_array(t_address)dyn_storage"
        },
        {
          "astId": 5105,
          "contract": "contracts/Sale.sol:Sale",
          "label": "TOKEN",
          "offset": 0,
          "slot": "213",
          "type": "t_address"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_array(t_address)dyn_storage": {
          "base": "t_address",
          "encoding": "dynamic_array",
          "label": "address[]",
          "numberOfBytes": "32"
        },
        "t_array(t_uint256)49_storage": {
          "base": "t_uint256",
          "encoding": "inplace",
          "label": "uint256[49]",
          "numberOfBytes": "1568"
        },
        "t_array(t_uint256)50_storage": {
          "base": "t_uint256",
          "encoding": "inplace",
          "label": "uint256[50]",
          "numberOfBytes": "1600"
        },
        "t_array(t_uint256)dyn_storage": {
          "base": "t_uint256",
          "encoding": "dynamic_array",
          "label": "uint256[]",
          "numberOfBytes": "32"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_bytes32": {
          "encoding": "inplace",
          "label": "bytes32",
          "numberOfBytes": "32"
        },
        "t_contract(AggregatorV3Interface)45": {
          "encoding": "inplace",
          "label": "contract AggregatorV3Interface",
          "numberOfBytes": "20"
        },
        "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256[])",
          "numberOfBytes": "32",
          "value": "t_array(t_uint256)dyn_storage"
        },
        "t_mapping(t_address,t_bool)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_bytes32,t_struct(RoleData)89_storage)": {
          "encoding": "mapping",
          "key": "t_bytes32",
          "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
          "numberOfBytes": "32",
          "value": "t_struct(RoleData)89_storage"
        },
        "t_mapping(t_uint256,t_bool)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_uint256,t_struct(Phase)3898_storage)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => struct Sale.Phase)",
          "numberOfBytes": "32",
          "value": "t_struct(Phase)3898_storage"
        },
        "t_mapping(t_uint256,t_struct(TokenTimelock)3915_storage)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => struct Sale.TokenTimelock)",
          "numberOfBytes": "32",
          "value": "t_struct(TokenTimelock)3915_storage"
        },
        "t_struct(Phase)3898_storage": {
          "encoding": "inplace",
          "label": "struct Sale.Phase",
          "members": [
            {
              "astId": 3879,
              "contract": "contracts/Sale.sol:Sale",
              "label": "isPublic",
              "offset": 0,
              "slot": "0",
              "type": "t_bool"
            },
            {
              "astId": 3881,
              "contract": "contracts/Sale.sol:Sale",
              "label": "minimunEntry",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256"
            },
            {
              "astId": 3883,
              "contract": "contracts/Sale.sol:Sale",
              "label": "price",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 3885,
              "contract": "contracts/Sale.sol:Sale",
              "label": "endAt",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256"
            },
            {
              "astId": 3887,
              "contract": "contracts/Sale.sol:Sale",
              "label": "supply",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256"
            },
            {
              "astId": 3889,
              "contract": "contracts/Sale.sol:Sale",
              "label": "over",
              "offset": 0,
              "slot": "5",
              "type": "t_bool"
            },
            {
              "astId": 3891,
              "contract": "contracts/Sale.sol:Sale",
              "label": "timelock",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256"
            },
            {
              "astId": 3894,
              "contract": "contracts/Sale.sol:Sale",
              "label": "timesToRelease",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_uint256)dyn_storage"
            },
            {
              "astId": 3897,
              "contract": "contracts/Sale.sol:Sale",
              "label": "percentsToRelease",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage"
            }
          ],
          "numberOfBytes": "288"
        },
        "t_struct(RoleData)89_storage": {
          "encoding": "inplace",
          "label": "struct AccessControlUpgradeable.RoleData",
          "members": [
            {
              "astId": 86,
              "contract": "contracts/Sale.sol:Sale",
              "label": "members",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)"
            },
            {
              "astId": 88,
              "contract": "contracts/Sale.sol:Sale",
              "label": "adminRole",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32"
            }
          ],
          "numberOfBytes": "64"
        },
        "t_struct(TokenTimelock)3915_storage": {
          "encoding": "inplace",
          "label": "struct Sale.TokenTimelock",
          "members": [
            {
              "astId": 3900,
              "contract": "contracts/Sale.sol:Sale",
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address"
            },
            {
              "astId": 3902,
              "contract": "contracts/Sale.sol:Sale",
              "label": "initAmount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256"
            },
            {
              "astId": 3904,
              "contract": "contracts/Sale.sol:Sale",
              "label": "remainAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 3907,
              "contract": "contracts/Sale.sol:Sale",
              "label": "timesToRelease",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)dyn_storage"
            },
            {
              "astId": 3910,
              "contract": "contracts/Sale.sol:Sale",
              "label": "percentsToRelease",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_uint256)dyn_storage"
            },
            {
              "astId": 3914,
              "contract": "contracts/Sale.sol:Sale",
              "label": "released",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_bool)"
            }
          ],
          "numberOfBytes": "192"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  }