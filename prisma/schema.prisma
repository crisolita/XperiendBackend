// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  password       String?
  authToken      String?
  referallFriend String?
  googleID       String?      @unique
  userName       String?      @unique
  newsletter     Boolean?
  kycStatus      StatusKYC?
  clientSecret   String?
  favoritos      Int[]
  userRol        USERROL
  orders         Orders[]
  pagos          Pagos[]
  kycInfo        KycInfo?
  OrdersXREN     OrdersXREN[]
}

model Templates {
  id            String   @id
  project_id    Int
  document_type Tipo
  project       Projects @relation(fields: [project_id], references: [id])
}

model GestionXREN {
  id             Int          @id @default(autoincrement())
  numero      String?
  banco       String?
  concepto_bancario String?
  pagoTransferencia     Boolean?
  pagoTarjeta           Boolean?
  pagoCripto            Boolean?
}

model KycInfo {
  id              Int         @id @default(autoincrement())
  user_id         Int         @unique
  name            String
  lastname        String
  country_born    String
  birth           DateTime
  document        String
  telf            String
  address         String
  city            String
  postalCode      Int
  state           String
  document_number String
  country         String
  status          StatusKYC
  motivo_rechazo  String?
  wallet          String
  kycImages       KycImages[]
  user            User        @relation(fields: [user_id], references: [id])
}

model Pagos {
  id             Int          @id @default(autoincrement())
  user_id        Int
  montoUSD       Float
  metodo_de_pago METODODEPAGO
  concepto       String?
  fecha          DateTime
  user           User         @relation(fields: [user_id], references: [id])
}

model Cuentas {
  id          Int        @id @default(autoincrement())
  numero      String
  banco       String
  projects    Projects[]
}

model Escenario_economico {
  id                 Int        @id @default(autoincrement())
  project_id         Int
  escenario          Escenario?
  aporte_inversores  Float?
  beneficio          Float?
  rentabilidad       Float?
  coste_activo       Float?
  costo_construccion Float?
  gestion_xperiend   Float?
  coste_desarrollo   Float?
  coste_promocion    Float?
  recursion          Float?
  project            Projects   @relation(fields: [project_id], references: [id])
}

model Gestion_fechas {
  id                       Int       @id @default(autoincrement())
  project_id               Int       @unique
  fecha_inicio_intercambio DateTime?
  fecha_fin_intercambio    DateTime?
  fecha_reclamo            DateTime?
  fecha_inicio_reinversion DateTime?
  fecha_fin_reinversion    DateTime?
  fecha_fin_venta          DateTime?
  visible_user             Boolean?
  visible_premium          Boolean?
  visible_gold             Boolean?
  project                  Projects  @relation(fields: [project_id], references: [id])
}

model UserManage {
  id            Int        @id @default(autoincrement())
  project_id    Int
  tipoDeUser    TipoDeUser
  openingDate   DateTime
  minXRENwallet Int
  minXRENstake  Int?
  project       Projects   @relation(fields: [project_id], references: [id])
}

model Projects {
  id                    Int                   @id @default(autoincrement())
  titulo                String
  cantidadInicial       Int?
  cantidadRestante      Int?
  precio_unitario       Float?
  beneficioPorNFT       Float?
  proyectoReinversion   Int?
  creator_id            Int?                  @unique
  estado                Estado?
  ubicacion             String?
  plazo_ejecucion       Int?
  ejecucion_proyecto    Float?
  rentabilidad_estimada Float?
  beneficio_estimado    Float?
  concepto_bancario     String?
  cuenta_id             Int?
  count_image           Int?
  description           String?
  resumen               String?
  definicion            String?
  recuperar_dinero_info String?
  pagoTransferencia     Boolean?
  pagoTarjeta           Boolean?
  pagoCripto            Boolean?
  images                ProjectImages[]
  cuenta                Cuentas?              @relation(fields: [cuenta_id], references: [id])
  Orders                Orders[]
  Escenarios_economicos Escenario_economico[]
  Gestion_fechas        Gestion_fechas?
  userManage            UserManage[]
  Templates             Templates[]
  NFT                   NFT[]
  ProjectDocs           ProjectDocs[]
}

model ProjectImages {
  id         Int       @id @default(autoincrement())
  project_id Int
  path       String    @unique
  rol        RolImage?
  project    Projects  @relation(fields: [project_id], references: [id])
}

model ProjectDocs {
  id         Int      @id @default(autoincrement())
  project_id Int
  path       String   @unique
  rol        RolDoc
  visible    Boolean
  project    Projects @relation(fields: [project_id], references: [id])
}

model KycImages {
  info_id Int
  path    String   @id @unique
  rol     RolImage
  kycInfo KycInfo  @relation(fields: [info_id], references: [id])
}

model Orders {
  id                Int              @id @default(autoincrement())
  tipo              Tipo
  user_id           Int
  project_id        Int
  status            EstadoPagoYFirma
  document_id       String?
  fecha             DateTime?
  nft_id            Int?
  cantidad          Int
  url_sign          String?
  exchange_receiver Int?
  nft               NFT?             @relation(fields: [nft_id], references: [id])
  project           Projects?        @relation(fields: [project_id], references: [id])
  user              User             @relation(fields: [user_id], references: [id])
}

model OrdersXREN {
  id        Int             @id @default(autoincrement())
  tipo      Tipo
  user_id   Int
  status    StatusOrderXREN
  unidades  Int
  amountUSD Float
  hash      String?
  fecha     DateTime?
  user      User            @relation(fields: [user_id], references: [id])
}

model NFT {
  id         Int       @id
  txHash     String
  project_id Int
  project    Projects? @relation(fields: [project_id], references: [id])
  orders     Orders[]
}

enum StatusKYC {
  APROBADO
  RECHAZADO
  PENDIENTE
}

enum TipoDeUser {
  REGULAR
  PREMIUM
  PREMIUMGOLD
}

enum METODODEPAGO {
  TRANSFERENCIA_BANCARIA
  USDT
  BUSD
  TARJETA_DE_CREDITO
}

enum Estado {
  NUEVO
  PROXIMAMENTE
  PUBLICO
  ABIERTO
  EN_PROCESO
  NO_COMPLETADO
  CERRADO
  TERMINADO
}

enum USERROL {
  CLIENT
  ADMIN
  SUPERADMIN
}

enum RolImage {
  PRINCIPAL
  NFT
  GALERIA
  DNIFRONTAL
  DNITRASERA
  USERDNI
}

enum Escenario {
  CONSERVADOR
  MODERADO
  FAVORABLE
}

enum Tipo {
  COMPRA
  INTERCAMBIO
  RECOMPRA
  RECLAMACION
  REINVERSION
}

enum StatusOrderXREN {
  PAGO_PENDIENTE
  ERROR_EN_PAGO
  POR_ENTREGAR
  PAGO_EXITOSO_ENTREGADO
}

enum EstadoPagoYFirma {
  PAGADO_Y_ENTREGADO_Y_FIRMADO
  PAGO_PENDIENTE
  ERROR_EN_PAGO
  POR_FIRMAR
  FIRMADO_POR_ENTREGAR
  PAGO_CANCELADO
  PAGO_DEVUELTO
  POR_INTERCAMBIAR
}

enum RolDoc {
  DOSSIER
  DETALLES
  TESTIGOS
  UBICACION
  PLANOS
  ECONOMICO
  DESCARGABLE
}
